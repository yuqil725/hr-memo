{"version":3,"sources":["assets/images/bg.png","assets/styles/index.ts","backend/appwrite/api_base.tsx","backend/appwrite/service/database/auth.tsx","components/common/Icon.tsx","components/TabBarIcon.tsx","Constants.tsx","redux_modules/reducer/change_search_card_screen.ts","redux_modules/reducer/change_todo_lists.ts","redux_modules/reducer/index.ts","redux_modules/reducer/change_profile.ts","redux_modules/reducer/change_screen_activity.ts","redux_modules/reducer/change_session.ts","redux_modules/index.ts","assets/styles/login.ts","redux_modules/action/index.ts","screens/login.tsx","backend/appwrite/service/database/collection/profile.tsx","backend/appwrite/service/database/collection/collection.tsx","backend/appwrite/service/database/database.tsx","utils/cameraUtil.tsx","backend/appwrite/service/storage/bucket/profile.tsx","backend/appwrite/service/storage/bucket/bucket.tsx","backend/appwrite/service/storage/storage.tsx","assets/styles/card_item.ts","components/CardItem.tsx","components/profileOneline.tsx","assets/styles/profileItem.ts","interfaces/profile.tsx","utils/stringUtil.tsx","utils/pinyin.js","backend/constants.tsx","interfaces/search.tsx","utils/dateUtil.tsx","assets/styles/search.ts","components/profile/profileConfig.tsx","components/profile/profileItem/profileItemRender/profileArrayItem/profileArrayItem.tsx","components/common/checkbox.tsx","components/profile/profileItem/profileItemRender/profileTodoItem/profileTodoArrayItem.tsx","components/profile/profileItem/profileItemRender.tsx","components/profile/profileItem.tsx","components/profile/profileImage/profileImage.tsx","utils/objectUtil.tsx","screens/Profile.tsx","screens/Search.tsx","assets/styles/todo.ts","components/todo/todoSection.tsx","interfaces/todo.tsx","screens/Todo.tsx","App.tsx"],"names":["module","exports","WHITE","GRAY","BLACK","DIMENSION_WIDTH","Dimensions","get","width","DIMENSION_HEIGHT","height","StyleSheet","create","city","backgroundColor","padding","borderRadius","elevation","shadowOpacity","shadowRadius","shadowColor","shadowOffset","cityText","color","fontSize","textAlign","filters","filtersText","containerMessage","flex","alignItems","justifyContent","flexDirection","paddingHorizontal","avatar","marginRight","marginVertical","message","paddingTop","bg","resizeMode","top","marginHorizontal","title","paddingBottom","body","bodyBold","fontWeight","containerHome","containerMatches","containerMessages","containerProfile","photo","topIconLeft","paddingLeft","topIconRight","paddingRight","actionsProfile","textButton","circledButton","roundedButtonPrimary","marginLeft","roundedButtonSecondary","tabButtonText","textTransform","iconMenu","minWidth","checkboxBase","borderWidth","borderColor","checkIcon","alignSelf","checkboxChecked","checkboxView","ApiBase","apiEndpoint","projectId","this","client","Client","setEndpoint","setProject","account","Account","ApiAuth","email","password","name","createEmailSession","listSessions","deleteSession","onSuccess","apiAuth","listSession","then","response","console","log","error","createSession","Icon","size","style","Ionicons","TabBarIcon","focused","iconName","text","searchCardScreen","useSelector","state","selectedCard","documentId","useEffect","View","styles","Text","Constants","EMPTY_CARD","imagePath","undefined","NEW_CARD","Reducer","profile","display","meta","action","type","payload","profileScreenActivity","friendshipDropdownOpen","searchCard","longPress","searchText","newSearchCard","map","card","newSelectedCard","todoList","session","store","configureStore","reducer","devTools","SLogin","screenView","textInput","margin","textInputView","flexShrink","submitButton","AChangeDisplayProfile","p","AChangeProfileScreenActivity","AChangeSearchCardScreen","AChangeSingleSearchCard","AChangeTodo","Login","navigation","useState","setEmail","setPassword","passwordRef","useRef","submit","createSessionIfNoLogin","dispatch","loggedIn","setTimeout","navigate","useFocusEffect","useCallback","ImageBackground","source","require","autoCompleteType","placeholder","value","autoFocus","length","onChangeText","ref","secureTextEntry","onSubmitEditing","onLayout","current","focus","Pressable","onPress","ApiProfileCollection","databaseId","collectionId","data","queryByDocumentId","documents","updateDocument","warn","database","createDocument","ID","unique","listDocuments","JSON","stringify","deleteDocument","queryList","queryDocument","Query","equal","Databases","UrlToObject","url","fileName","fetch","blob","File","PickImage","ImagePicker","mediaTypes","All","allowsEditing","aspect","quality","ApiProfileBucket","bucketId","createFileFromWeb","fileId","storage","createFile","createFileFromIos","match","exec","formData","FormData","append","uri","sendXmlHttpRequest","filePath","file","Platform","OS","getFile","args","getFilePreview","deleteFile","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","e","readyState","status","parse","open","withCredentials","setRequestHeader","send","Storage","SCardItem","containerCardItem","matchesCardItem","marginTop","paddingVertical","matchesTextCardItem","descriptionCardItem","statusText","online","offline","actionsCardItem","button","miniButton","nameView","CardItem","props","fullWidth","imageStyle","oneline","anim","Animated","Value","shakeLoop","loop","sequence","timing","toValue","duration","useNativeDriver","iterations","start","reset","apiProfileCollection","apiProfileBucket","transform","rotate","interpolate","inputRange","outputRange","Image","toString","TouchableOpacity","Name","renderScreen","Math","random","FontAwesome","position","ProfileOneLine","image","lastMessage","disabled","opacity","textDecorationLine","SProfileItem","containerProfileItem","matchesProfileItem","matchesTextProfileItem","descriptionProfileItem","infoList","iconProfile","infoSectionView","zIndex","infoSectionTitleView","infoSectionContent","infoSectionText","infoContent","ISProfileDisplayItem","FriendshipStage","LivingAddress","Education","Activity","Comment","Todo","ImagePath","ISProfileMetaItem","$id","Pascalize","str","replace","word","index","toUpperCase","SnakeCase","string","toLowerCase","split","join","charAt","substring","ProcessName","trimStart","test","chinese","simplePinyin","pinyinOnly","updateTodo","todo","lastDash","slice","startsWith","friendshipStage","description","example","ISSearchCard","TsToStr","Ts","todate","Date","getDate","tomonth","getMonth","getFullYear","SSearch","centeredModel","modalView","ProfileConfig","key","ProfileArrayItem","valueHandler","k","profileItem","deleteItem","setDeleteItem","apiPofile","setInputTextRef","focusItem","inputTextRef","moveFocusItem","step","Object","values","v","Fragment","Modal","animationType","transparent","visible","onRequestClose","Alert","alert","newValue","TextInput","returnKeyType","keyboardType","placeholderTextColor","onBlur","newArray","nativeEvent","splice","at","onFocus","onKeyPress","event","min","max","Checkbox","checked","onChecked","textInputProps","ProfileTodoArrayItem","newTodo","ProfileItemRender","addDateString","s","prefix","now","includes","multiple","autoScroll","mode","extendableBadgeContainer","textStyle","items","keys","i","label","setOpen","setValue","callback","onSelectItem","newItem","ProfileItem","profileDisplayItem","ProfileImage","onPressCallback","onDrop","objectFilterKey","o","reduce","acc","objectMapKey","objectRemoveEmptyStr","filter","Profile","updateImage","img","newImagePath","updateByDocumentId","pickImage","result","canceled","assets","dropImage","refreshing","setRefreshing","newDisplayState","exception","Array","isArray","objectAddOneStartEmptyStrToArray","newMetaState","KeyboardAvoidingView","behavior","ScrollView","refreshControl","RefreshControl","onRefresh","onSwipeRight","goBack","Search","listDocument","newSearchState","sort","a","b","unshift","searchInputRef","SectionList","keyboardDismissMode","sections","namecardArray","namecardObject","nc","processedName","firstLetter","push","namecardArrayToSection","renderSectionHeader","section","keyExtractor","item","renderItem","onLongPress","STodo","todoSection","switchView","right","todoFlatList","highlightDateView","normalDateView","TodoSection","todayStr","isEnabled","setIsEnabled","setTodayY","scrollRef","trackColor","false","true","thumbColor","ios_backgroundColor","onValueChange","previousState","layout","y","scrollTo","animated","todoStr","indexOf","date","todoItem","idx","itemTmp","toggleTodo","ISTodoItem","newTodoItems","todoItems","todoStart","localeCompare","obj","convertTodoItemToTodoList","isIOS","App","Stack","createStackNavigator","Tab","createBottomTabNavigator","NavigationContainer","Navigator","Screen","options","headerShown","animationEnabled","tabBarOptions","showLabel","activeTintColor","inactiveTintColor","labelStyle","borderTopWidth","marginBottom","component","tabBarIcon","unmountOnBlur"],"mappings":"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","file":"static/js/app.f6053075.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.b587a02b.png\";","import { StyleSheet, Dimensions } from \"react-native\";\n\nexport const PRIMARY_COLOR = \"#5636B8\";\nexport const SECONDARY_COLOR = \"#D2EAEA\";\nexport const DISABLE_COLOR = \"#F7F3F0\";\nexport const WHITE = \"#FFFFFF\";\nexport const GRAY = \"#757E90\";\nexport const DARK_GRAY = \"#363636\";\nexport const BLACK = \"#000000\";\n\nexport const ONLINE_STATUS = \"#46A575\";\nexport const OFFLINE_STATUS = \"#D04949\";\n\nexport const STAR_ACTIONS = \"#CEDFD9\";\nexport const LIKE_ACTIONS = \"#B644B2\";\nexport const DISLIKE_ACTIONS = \"#363636\";\nexport const FLASH_ACTIONS = \"#5028D7\";\n\nexport const DIMENSION_WIDTH = Dimensions.get(\"window\").width;\nexport const DIMENSION_HEIGHT = Dimensions.get(\"window\").height;\n\nexport default StyleSheet.create({\n  // COMPONENT - CITY\n  city: {\n    backgroundColor: WHITE,\n    padding: 10,\n    borderRadius: 20,\n    width: 100,\n    elevation: 1,\n    shadowOpacity: 0.05,\n    shadowRadius: 10,\n    shadowColor: BLACK,\n    shadowOffset: { height: 0, width: 0 },\n  },\n  cityText: {\n    color: DARK_GRAY,\n    fontSize: 13,\n    textAlign: \"center\",\n  },\n\n  // COMPONENT - FILTERS\n  filters: {\n    backgroundColor: WHITE,\n    padding: 10,\n    borderRadius: 20,\n    width: 90,\n    elevation: 1,\n    shadowOpacity: 0.05,\n    shadowRadius: 10,\n    shadowColor: BLACK,\n    shadowOffset: { height: 0, width: 0 },\n  },\n  filtersText: {\n    color: DARK_GRAY,\n    fontSize: 13,\n    textAlign: \"center\",\n  },\n\n  // COMPONENT - MESSAGE\n  containerMessage: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    flexDirection: \"row\",\n    paddingHorizontal: 10,\n    width: DIMENSION_WIDTH - 100,\n  },\n  avatar: {\n    borderRadius: 30,\n    width: 60,\n    height: 60,\n    marginRight: 20,\n    marginVertical: 15,\n  },\n  message: {\n    color: GRAY,\n    fontSize: 12,\n    paddingTop: 5,\n  },\n\n  // CONTAINER - GENERAL\n  bg: {\n    flex: 1,\n    resizeMode: \"cover\",\n    width: DIMENSION_WIDTH,\n    height: DIMENSION_HEIGHT,\n  },\n  top: {\n    paddingTop: 50,\n    marginHorizontal: 10,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n\n  // Text\n  title: { paddingBottom: 10, fontSize: 22, color: DARK_GRAY },\n  body: { fontSize: 22, color: DARK_GRAY },\n  bodyBold: {\n    fontSize: 22,\n    color: DARK_GRAY,\n    fontWeight: \"bold\",\n  },\n\n  // CONTAINER - HOME\n  containerHome: {\n    marginHorizontal: 10,\n    flex: 1,\n    height: \"100%\",\n    width: \"100%\",\n  },\n\n  // CONTAINER - MATCHES\n  containerMatches: {\n    justifyContent: \"space-between\",\n    flex: 1,\n    paddingHorizontal: 10,\n  },\n\n  // CONTAINER - MESSAGES\n  containerMessages: {\n    justifyContent: \"space-between\",\n    flex: 1,\n    paddingHorizontal: 10,\n  },\n\n  // CONTAINER - PROFILE\n  containerProfile: { marginHorizontal: 0 },\n  photo: {\n    height: DIMENSION_HEIGHT / 2,\n    width: DIMENSION_WIDTH,\n  },\n  topIconLeft: {\n    paddingLeft: 20,\n  },\n  topIconRight: {\n    paddingRight: 20,\n  },\n  actionsProfile: {\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  textButton: {\n    fontSize: 15,\n    color: WHITE,\n    paddingLeft: 5,\n  },\n  circledButton: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: PRIMARY_COLOR,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginRight: 10,\n  },\n  roundedButtonPrimary: {\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginLeft: 10,\n    marginRight: 10,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: PRIMARY_COLOR,\n    paddingHorizontal: 20,\n  },\n  roundedButtonSecondary: {\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginLeft: 10,\n    marginRight: 10,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: SECONDARY_COLOR,\n    paddingHorizontal: 20,\n  },\n\n  // MENU\n  tabButtonText: {\n    textTransform: \"uppercase\",\n  },\n  iconMenu: {\n    alignItems: \"center\",\n    minWidth: 200,\n  },\n\n  // Checkbox\n  checkboxBase: {\n    width: 24,\n    height: 24,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: BLACK,\n    backgroundColor: \"transparent\",\n    marginRight: 12,\n  },\n  checkIcon: {\n    alignSelf: \"center\",\n    color: BLACK,\n  },\n  checkboxChecked: {\n    borderWidth: 2,\n    borderColor: BLACK,\n  },\n  checkboxView: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n});\n","import { Account, Client } from \"appwrite\";\n\nexport class ApiBase {\n  apiEndpoint: string;\n  projectId: string;\n  client: any;\n  account: any;\n\n  constructor(apiEndpoint: string, projectId: string) {\n    this.apiEndpoint = apiEndpoint;\n    this.projectId = projectId;\n    this.client = new Client();\n    this.client.setEndpoint(this.apiEndpoint).setProject(this.projectId);\n    this.account = new Account(this.client);\n  }\n}\n\nexport function printPromise(promise: any) {\n  return promise.then(\n    function (response: any) {\n      console.log(response);\n      return response;\n    },\n    function (error: any) {\n      console.error(error);\n      return null;\n    }\n  );\n}\n\n// let api = new ApiB(Constants.API_ENDPOINT, Constants.P_NAMECARD_ID);\n","import { ApiBase } from \"../../api_base\";\n\nexport class ApiAuth extends ApiBase {\n  constructor(apiEndpoint: string, projectId: string) {\n    super(apiEndpoint, projectId);\n  }\n\n  createAccount(email: any, password: any, name: any) {\n    return this.account.create(\"unique()\", email, password, name);\n  }\n\n  getAccount() {\n    return this.account.get();\n  }\n\n  createSession(email: any, password: any) {\n    return this.account.createEmailSession(email, password);\n  }\n\n  listSession() {\n    return this.account.listSessions();\n  }\n\n  deleteCurrentSession() {\n    return this.account.deleteSession(\"current\");\n  }\n\n  createSessionIfNoLogin(email: any, password: any, onSuccess?: any) {\n    let apiAuth: any = this;\n    let promise: any = this.listSession();\n    promise.then(\n      function (response: any) {\n        console.log(\"Found existing sessions:\", response);\n        onSuccess && onSuccess();\n      },\n      function (error: any) {\n        console.log(\"Didn't find session\", error);\n        apiAuth.createSession(email, password);\n      }\n    );\n  }\n}\n","import { Ionicons } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { TIcon } from \"../../interfaces/general\";\n\nconst Icon = ({ color, name, size, style }: TIcon) => (\n  <Ionicons name={name} size={size} color={color} style={style} />\n);\n\nexport default Icon;\n","import React, { useEffect } from \"react\";\nimport { Text, View } from \"react-native\";\nimport Icon from \"./common/Icon\";\nimport styles, {\n  DARK_GRAY,\n  DISABLE_COLOR,\n  PRIMARY_COLOR,\n} from \"../assets/styles\";\nimport { TTabBarIcon } from \"../interfaces/general\";\nimport { ISearchCardScreen } from \"../interfaces/search\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux_modules\";\n\nconst TabBarIcon = ({ focused, iconName, text }: TTabBarIcon) => {\n  let searchCardScreen: ISearchCardScreen = useSelector((state: RootState) => {\n    return state.searchCardScreen;\n  });\n\n  let color = focused ? PRIMARY_COLOR : DARK_GRAY;\n  if (text == \"Profile\" && searchCardScreen.selectedCard.documentId == \"\") {\n    color = DISABLE_COLOR;\n  }\n  useEffect(() => {\n    text = searchCardScreen.selectedCard.name;\n  }, [searchCardScreen.selectedCard.name]);\n\n  return (\n    <View style={styles.iconMenu}>\n      <Icon name={iconName} size={16} color={color} />\n      <Text style={[styles.tabButtonText, { color: color }]}>\n        {text == \"Profile\" ? searchCardScreen.selectedCard.name : text}\n      </Text>\n    </View>\n  );\n};\n\nexport default TabBarIcon;\n","export const Constants = {\n  // Database\n  DB_NAMECARD_ID: \"63a361ad7a9fe2d55146\",\n  // Project\n  P_NAMECARD_ID: \"63a35ca6807c7be8f650\",\n  // Collection\n  C_PROFILE_ID: \"63a361fa7032bed7fac1\",\n  // Bucket\n  BKT_NAMECARD_ID: \"63ab2a16216097f7c1bc\",\n  // Endpoint\n  API_ENDPOINT: `http://216.128.180.97/v1`,\n  // Auth\n  EMAIL: \"zjlyq88@gmail.com\",\n  PASSWORD: \"Zjlyq99880099225\",\n};\n","import { AnyAction } from \"redux\";\nimport { ISearchCard, ISearchCardScreen } from \"../../interfaces/search\";\n\nexport const EMPTY_CARD: ISearchCard = {\n  name: \"\",\n  documentId: \"\",\n  imagePath: undefined,\n};\n\nexport const NEW_CARD: ISearchCard = {\n  name: \" \",\n  documentId: \" \",\n  imagePath: undefined,\n};\n\nconst RChangeSearchCardScreen = (\n  state: ISearchCardScreen = {\n    selectedCard: EMPTY_CARD,\n    searchCard: [EMPTY_CARD],\n    longPress: false,\n    searchText: \"\",\n  },\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case \"CHANGE_SEARCH_CARD_SCREEN\":\n      return { ...state, ...action.payload };\n    case \"CHANGE_SINGLE_SEARCH_CARD\":\n      const newSearchCard = state.searchCard.map((card: ISearchCard) => {\n        if (card.documentId == action.payload.documentId) {\n          return { ...card, ...action.payload };\n        } else {\n          return card;\n        }\n      });\n      let newSelectedCard: ISearchCard = { ...state.selectedCard };\n      if (newSelectedCard.documentId == action.payload.documentId) {\n        newSelectedCard = { ...newSelectedCard, ...action.payload };\n      }\n      return {\n        ...state,\n        selectedCard: newSelectedCard,\n        searchCard: newSearchCard,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default RChangeSearchCardScreen;\n","import { AnyAction } from \"redux\";\n\nconst RChangeTodoList = (state: any = {}, action: AnyAction) => {\n  switch (action.type) {\n    case \"CHANGE_TODO\":\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default RChangeTodoList;\n","import RChangeProfile from \"./change_profile\";\nimport RChangeProfileScreenActivity from \"./change_screen_activity\";\nimport RChangeSearchCardScreen from \"./change_search_card_screen\";\nimport RChangeSession from \"./change_session\";\nimport RChangeTodoList from \"./change_todo_lists\";\n\nconst Reducer = {\n  profile: RChangeProfile,\n  profileScreenActivity: RChangeProfileScreenActivity,\n  searchCardScreen: RChangeSearchCardScreen,\n  todoList: RChangeTodoList,\n  session: RChangeSession,\n};\n\nexport default Reducer;\n","import { AnyAction } from \"redux\";\nimport { IProfileItem } from \"../../interfaces/profile\";\n\nconst RChangeProfile = (\n  state: IProfileItem = { display: { name: \"\" }, meta: { documentId: \"\" } },\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case \"CHANGE_DISPLAY_PROFILE\":\n      return {\n        ...state,\n        ...{ display: { ...state.display, ...action.payload } },\n      };\n    case \"CHANGE_META_PROFILE\":\n      return {\n        ...state,\n        ...{ meta: { ...state.meta, ...action.payload } },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default RChangeProfile;\n","import { AnyAction } from \"redux\";\nimport { IProfileScreenActivity } from \"../../interfaces/profile\";\n\nconst RChangeProfileScreenActivity = (\n  state: IProfileScreenActivity = { friendshipDropdownOpen: false },\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case \"CHANGE_PROFILE_SCREEN_ACTIVITY\":\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default RChangeProfileScreenActivity;\n","import { AnyAction } from \"redux\";\n\nconst RChangeSession = (state: any = {}, action: AnyAction) => {\n  switch (action.type) {\n    case \"CHANGE_SESSION\":\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default RChangeSession;\n","import Reducer from \"./reducer\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nconst store = configureStore({ reducer: Reducer, devTools: true });\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import { StyleSheet } from \"react-native\";\n\nexport const SLogin = StyleSheet.create({\n  screenView: {\n    flex: 1,\n    height: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  textInput: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n    paddingHorizontal: 10,\n    width: 200,\n    borderWidth: 2,\n    borderRadius: 15,\n    fontSize: 20,\n    margin: 10,\n  },\n  textInputView: {\n    height: 150,\n    flexShrink: 20,\n    alignItems: \"center\",\n    backgroundColor: \"transparent\",\n  },\n  submitButton: {\n    width: 50,\n    fontSize: 22,\n  },\n});\n","// Profile\nexport const AChangeMetaProfile = (p: any) => {\n  return {\n    type: \"CHANGE_META_PROFILE\",\n    payload: p,\n  };\n};\n\nexport const AChangeDisplayProfile = (p: any) => {\n  return {\n    type: \"CHANGE_DISPLAY_PROFILE\",\n    payload: p,\n  };\n};\n\nexport const AChangeProfileScreenActivity = (p: any) => {\n  return {\n    type: \"CHANGE_PROFILE_SCREEN_ACTIVITY\",\n    payload: p,\n  };\n};\n\n// Search\nexport const AChangeSearchCardScreen = (p: any) => {\n  return {\n    type: \"CHANGE_SEARCH_CARD_SCREEN\",\n    payload: p,\n  };\n};\n\nexport const AChangeSingleSearchCard = (p: any) => {\n  return {\n    type: \"CHANGE_SINGLE_SEARCH_CARD\",\n    payload: p,\n  };\n};\n\n// Todo\nexport const AChangeTodo = (p: any) => {\n  return {\n    type: \"CHANGE_TODO\",\n    payload: p,\n  };\n};\n\n// Session\nexport const AChangeSession = (p: any) => {\n  return {\n    type: \"CHANGE_SESSION\",\n    payload: p,\n  };\n};\n","import { useFocusEffect } from \"@react-navigation/native\";\nimport React, { useCallback, useRef, useState } from \"react\";\nimport { ImageBackground, Pressable, Text, View } from \"react-native\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { SLogin } from \"../assets/styles/login\";\nimport { ApiAuth } from \"../backend/appwrite/service/database/auth\";\nimport { Constants } from \"../Constants\";\nimport store from \"../redux_modules\";\nimport { AChangeSession } from \"../redux_modules/action\";\n\nconst Login = ({ navigation }: { navigation: any }) => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const passwordRef: React.MutableRefObject<TextInput | null> = useRef(null);\n\n  function submit() {\n    let apiAuth = new ApiAuth(Constants.API_ENDPOINT, Constants.P_NAMECARD_ID);\n\n    apiAuth.createSessionIfNoLogin(email, password, () => {\n      store.dispatch(AChangeSession({ loggedIn: true }));\n    });\n\n    setTimeout(() => {\n      navigation.navigate(\"Login\");\n    }, 500);\n  }\n\n  useFocusEffect(\n    useCallback(() => {\n      submit();\n    }, [])\n  );\n\n  return (\n    <View style={SLogin.screenView}>\n      <ImageBackground source={require(\"../assets/images/bg.png\")}>\n        <View style={SLogin.textInputView}>\n          <TextInput\n            autoCompleteType=\"email\"\n            placeholder=\"email\"\n            style={SLogin.textInput}\n            value={email}\n            autoFocus={email.length > 0 ? true : undefined}\n            onChangeText={setEmail}\n          />\n          <TextInput\n            autoCompleteType=\"password\"\n            ref={passwordRef}\n            placeholder=\"password\"\n            secureTextEntry={true}\n            style={SLogin.textInput}\n            value={password}\n            onChangeText={setPassword}\n            onSubmitEditing={() => {\n              submit();\n            }}\n            onLayout={() => {\n              passwordRef.current?.focus();\n            }}\n          />\n          <Pressable\n            style={SLogin.submitButton}\n            onPress={() => {\n              submit();\n            }}\n          >\n            <Text>submit</Text>\n          </Pressable>\n        </View>\n      </ImageBackground>\n    </View>\n  );\n};\n\nexport default Login;\n","import { ApiCollection } from \"./collection\";\n\nexport class ApiProfileCollection extends ApiCollection {\n  constructor(\n    apiEndpoint: string,\n    projectId: string,\n    databaseId: string,\n    collectionId: string\n  ) {\n    super(apiEndpoint, projectId, databaseId, collectionId);\n  }\n\n  updateByDocumentId(documentId: string, data: any) {\n    let promise = this.queryByDocumentId(documentId);\n    return promise.then(\n      (response: any) => {\n        if (response.documents.length !== 1) {\n          console.warn(\"Incorrect number of documents\", response);\n        } else {\n          let doc = response.documents[0];\n          const documentId = doc[\"$id\"];\n          return this.updateDocument(documentId, data);\n        }\n      },\n      (error: any) => {\n        console.error(error);\n      }\n    );\n  }\n}\n","import { ID, Query } from \"appwrite\";\nimport { ApiDatabase } from \"../database\";\n\nexport class ApiCollection extends ApiDatabase {\n  collectionId: string;\n\n  constructor(\n    apiEndpoint: string,\n    projectId: string,\n    databaseId: string,\n    collectionId: string\n  ) {\n    super(apiEndpoint, projectId, databaseId);\n    this.collectionId = collectionId;\n  }\n\n  createDocument(data: any) {\n    return this.database.createDocument(\n      this.databaseId,\n      this.collectionId,\n      ID.unique(),\n      data\n    );\n  }\n\n  listDocument() {\n    return this.database.listDocuments(this.databaseId, this.collectionId);\n  }\n\n  updateDocument(documentId: string, data: any) {\n    console.log(\n      \"collection.tsx: Updating %s to %s\",\n      JSON.stringify(data),\n      documentId\n    );\n    return this.database.updateDocument(\n      this.databaseId,\n      this.collectionId,\n      documentId,\n      data\n    );\n  }\n\n  deleteDocument(documentId: any) {\n    return this.database.deleteDocument(\n      this.databaseId,\n      this.collectionId,\n      documentId\n    );\n  }\n\n  queryDocument(queryList: any) {\n    return this.database.listDocuments(\n      this.databaseId,\n      this.collectionId,\n      queryList\n    );\n  }\n\n  queryByDocumentId(documentId: string) {\n    return this.queryDocument([Query.equal(\"$id\", documentId)]);\n  }\n}\n","import { Databases } from \"appwrite\";\nimport { ApiBase } from \"../../api_base\";\n\nexport class ApiDatabase extends ApiBase {\n  databaseId: string;\n  database: any;\n\n  constructor(apiEndpoint: string, projectId: string, databaseId: string) {\n    super(apiEndpoint, projectId);\n    this.databaseId = databaseId;\n    this.database = new Databases(this.client);\n  }\n}\n","import * as ImagePicker from \"expo-image-picker\";\n\nexport const UrlToObject = async (url: string, fileName: string) => {\n  const response = await fetch(url);\n  // here image is url/location of image\n  const blob = await response.blob();\n  const file = new File([blob], fileName, { type: blob.type });\n  return file;\n};\n\nexport const PickImage = async () => {\n  // No permissions request is necessary for launching the image library\n  return await ImagePicker.launchImageLibraryAsync({\n    mediaTypes: ImagePicker.MediaTypeOptions.All,\n    allowsEditing: true,\n    aspect: [4, 3],\n    quality: 1,\n  });\n};\n","import { ApiBucket } from \"./bucket\";\n\nexport class ApiProfileBucket extends ApiBucket {\n  constructor(apiEndpoint: string, projectId: string, bucketId: string) {\n    super(apiEndpoint, projectId, bucketId);\n  }\n}\n","import { ID } from \"appwrite\";\nimport { Platform } from \"react-native\";\nimport { Constants } from \"../../../../../Constants\";\nimport { UrlToObject } from \"../../../../../utils/cameraUtil\";\nimport { ApiStorage } from \"../storage\";\n\nexport class ApiBucket extends ApiStorage {\n  bucketId: string;\n\n  constructor(apiEndpoint: string, projectId: string, bucketId: string) {\n    super(apiEndpoint, projectId);\n    this.bucketId = bucketId;\n  }\n\n  createFile(filePath: string, fileName: string, file?: File) {\n    if (file) {\n      return this.storage.createFile(this.bucketId, ID.unique(), file);\n    } else if (Platform.OS === \"ios\") {\n      // do something for ios\n      return this.createFileFromIos(filePath, fileName);\n    } else if (Platform.OS === \"android\") {\n      console.error(\"Haven't supported android\");\n      // other thing for android\n    } else if (Platform.OS === \"web\") {\n      // it's on web!\n      return this.createFileFromWeb(filePath, fileName);\n    } else {\n      // you probably won't end up here unless you support another platform!\n    }\n  }\n\n  createFileURL() {\n    return `${Constants.API_ENDPOINT}/storage/buckets/${this.bucketId}/files/`;\n  }\n\n  getFile(fileId: string) {\n    return this.storage.getFile(this.bucketId, fileId);\n  }\n\n  getFilePreview(fileId: string, ...args: any) {\n    // only support\n    // image <= 10MB\n    // jpg, png, and gif\n    // return file icon image\n    // can add addtional arguments to change image property\n    return this.storage.getFilePreview(this.bucketId, fileId, ...args);\n  }\n\n  deleteFile(fileId: string) {\n    return this.storage.deleteFile(this.bucketId, fileId);\n  }\n\n  sendXmlHttpRequest(data: any) {\n    const xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n      xhr.onreadystatechange = (e) => {\n        if (xhr.readyState !== 4) {\n          return;\n        }\n        console.log(\"xhr.status\", xhr);\n\n        if (xhr.status === 201) {\n          resolve(JSON.parse(xhr.response));\n        } else {\n          reject(\"Request Failed\");\n        }\n      };\n\n      xhr.open(\n        \"POST\",\n        `${Constants.API_ENDPOINT}/storage/buckets/${this.bucketId}/files/`\n      );\n      xhr.withCredentials = true;\n      // xhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\n      xhr.setRequestHeader(\"X-Appwrite-Project\", this.projectId);\n      xhr.setRequestHeader(\"X-Appwrite-Response-Format\", \"0.15.0\");\n      xhr.setRequestHeader(\"x-sdk-version\", \"appwrite:web:9.0.1\");\n      xhr.send(data);\n    });\n  }\n\n  createFileFromWeb = async (imagePath: string, fileName: string) => {\n    const fileId = ID.unique();\n    return this.storage.createFile(\n      this.bucketId,\n      fileId,\n      await UrlToObject(imagePath, fileName)\n    );\n  };\n\n  createFileFromIos = async (imagePath: string, fileName: string) => {\n    // Infer the type of the image\n    let match = /\\.(\\w+)$/.exec(imagePath);\n    let type = match ? `image/${match[1]}` : `image`;\n\n    let formData = new FormData();\n    formData.append(\"fileId\", \"unique()\");\n    formData.append(\"file\", {\n      uri: imagePath,\n      name: fileName,\n      type,\n    } as any);\n\n    console.log(\"formData\", formData);\n    return this.sendXmlHttpRequest(formData);\n  };\n}\n","import { Storage } from \"appwrite\";\nimport { ApiBase } from \"../../api_base\";\n\nexport class ApiStorage extends ApiBase {\n  storage: Storage;\n\n  constructor(apiEndpoint: string, projectId: string) {\n    super(apiEndpoint, projectId);\n    this.storage = new Storage(this.client);\n  }\n}\n","import { StyleSheet } from \"react-native\";\nimport {\n  BLACK,\n  DARK_GRAY,\n  GRAY,\n  OFFLINE_STATUS,\n  ONLINE_STATUS,\n  PRIMARY_COLOR,\n  WHITE,\n} from \".\";\n\nexport const SCardItem = StyleSheet.create({\n  // COMPONENT - CARD ITEM\n  containerCardItem: {\n    backgroundColor: WHITE,\n    borderRadius: 8,\n    alignItems: \"center\",\n    margin: 0,\n    elevation: 1,\n    shadowOpacity: 0.05,\n    shadowRadius: 10,\n    shadowColor: BLACK,\n    shadowOffset: { height: 0, width: 0 },\n    flexDirection: \"row\",\n  },\n  matchesCardItem: {\n    marginTop: -35,\n    backgroundColor: PRIMARY_COLOR,\n    paddingVertical: 7,\n    paddingHorizontal: 20,\n    borderRadius: 20,\n  },\n  matchesTextCardItem: {\n    color: WHITE,\n  },\n  descriptionCardItem: {\n    color: GRAY,\n    textAlign: \"center\",\n  },\n  status: {\n    paddingBottom: 10,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  statusText: {\n    color: GRAY,\n    fontSize: 12,\n  },\n  online: {\n    width: 6,\n    height: 6,\n    backgroundColor: ONLINE_STATUS,\n    borderRadius: 3,\n    marginRight: 4,\n  },\n  offline: {\n    width: 6,\n    height: 6,\n    backgroundColor: OFFLINE_STATUS,\n    borderRadius: 3,\n    marginRight: 4,\n  },\n  actionsCardItem: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingVertical: 30,\n  },\n  button: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: WHITE,\n    marginHorizontal: 7,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    elevation: 1,\n    shadowOpacity: 0.15,\n    shadowRadius: 20,\n    shadowColor: DARK_GRAY,\n    shadowOffset: { height: 10, width: 0 },\n  },\n  miniButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 30,\n    backgroundColor: WHITE,\n    marginHorizontal: 7,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    elevation: 1,\n    shadowOpacity: 0.15,\n    shadowRadius: 20,\n    shadowColor: DARK_GRAY,\n    shadowOffset: { height: 10, width: 0 },\n  },\n  nameView: {\n    flex: 1,\n  },\n});\n","import React, { useEffect, useRef } from \"react\";\nimport {\n  Text,\n  View,\n  Image,\n  Dimensions,\n  Animated,\n  TouchableOpacity,\n} from \"react-native\";\nimport { SCardItem } from \"../assets/styles/card_item\";\nimport { ApiProfileBucket } from \"../backend/appwrite/service/storage/bucket/profile\";\nimport { Constants } from \"../Constants\";\nimport { ISearchCard, ISearchCardScreen } from \"../interfaces/search\";\nimport { FontAwesome, Ionicons } from \"@expo/vector-icons\";\nimport { GRAY } from \"../assets/styles\";\nimport store, { RootState } from \"../redux_modules\";\nimport { useSelector } from \"react-redux\";\nimport { ApiProfileCollection } from \"../backend/appwrite/service/database/collection/profile\";\nimport { NEW_CARD } from \"../redux_modules/reducer/change_search_card_screen\";\nimport { AChangeSearchCardScreen } from \"../redux_modules/action\";\n\nconst CardItem = (props: ISearchCard) => {\n  // Custom styling\n  const fullWidth = Dimensions.get(\"window\").width;\n\n  const imageStyle = {\n    borderRadius: 8,\n    width: props.oneline ? 40 : fullWidth / 2 - 30,\n    height: props.oneline ? 40 : 170,\n  };\n  const nameStyle = [\n    {\n      paddingTop: 10,\n      paddingBottom: 5,\n      color: \"#363636\",\n      fontSize: 15,\n    },\n  ];\n\n  const anim = useRef(new Animated.Value(0));\n\n  let searchCardScreen: ISearchCardScreen = useSelector(\n    (state: RootState) => state.searchCardScreen\n  );\n\n  const shakeLoop = Animated.loop(\n    // runs the animation array in sequence\n    Animated.sequence([\n      // shift element to the left by 2 units\n      Animated.timing(anim.current, {\n        toValue: -2,\n        duration: 25,\n        useNativeDriver: false,\n      }),\n      // shift element to the right by 2 units\n      Animated.timing(anim.current, {\n        toValue: 2,\n        duration: 25,\n        useNativeDriver: false,\n      }),\n      // bring the element back to its original position\n      Animated.timing(anim.current, {\n        toValue: 0,\n        duration: 25,\n        useNativeDriver: false,\n      }),\n    ]),\n    // loops the above animation config 2 times\n    { iterations: -1 }\n  );\n\n  useEffect(() => {\n    searchCardScreen.longPress && props.imagePath\n      ? shakeLoop.start()\n      : shakeLoop.reset();\n  }, [searchCardScreen.longPress]);\n\n  let apiProfileCollection = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  let apiProfileBucket = new ApiProfileBucket(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.BKT_NAMECARD_ID\n  );\n\n  // #TODO: need to change once supporting multiple images\n\n  return (\n    <Animated.View\n      style={{\n        transform: [\n          {\n            rotate: anim.current.interpolate({\n              inputRange: [-1, 1],\n              outputRange: [\"-0.005rad\", \"0.005rad\"],\n            }),\n          },\n        ],\n      }}\n    >\n      <View style={{ ...SCardItem.containerCardItem }}>\n        {/* IMAGE */}\n        {props.imagePath && props.imagePath.length > 0 ? (\n          <Image\n            source={{\n              uri: apiProfileBucket.getFilePreview(props.imagePath).toString(),\n            }}\n            style={imageStyle}\n          />\n        ) : undefined}\n\n        {props.imagePath && props.imagePath.length === 0 ? (\n          <View\n            style={{\n              ...imageStyle,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          ></View>\n        ) : undefined}\n\n        {!props.imagePath ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (!searchCardScreen.longPress) {\n                console.log(\"Creating a new namecard\");\n                const promise = apiProfileCollection.createDocument({\n                  Name: NEW_CARD.name,\n                });\n                promise.then(\n                  function (response: any) {\n                    store.dispatch(\n                      AChangeSearchCardScreen({ renderScreen: Math.random() })\n                    );\n                  },\n                  function (error: any) {\n                    console.error(error);\n                  }\n                );\n              }\n              return;\n            }}\n          >\n            <View\n              style={{\n                ...imageStyle,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Ionicons\n                name=\"ios-person-add\"\n                size={props.oneline ? 40 : 120}\n                color={GRAY}\n                // style={{ width: \"100%\" }}\n              />\n            </View>\n          </TouchableOpacity>\n        ) : undefined}\n\n        {/* NAME */}\n        <View\n          style={{\n            ...SCardItem.nameView,\n            paddingLeft: props.oneline ? 10 : undefined,\n          }}\n        >\n          <Text style={nameStyle}>{props.name}</Text>\n        </View>\n      </View>\n\n      {/* Remove Icon */}\n      {searchCardScreen.longPress && props.imagePath ? (\n        <FontAwesome\n          name=\"remove\"\n          size={25}\n          color=\"red\"\n          style={{\n            alignSelf: \"flex-end\",\n            marginTop: -2,\n            position: \"absolute\",\n          }}\n        />\n      ) : undefined}\n    </Animated.View>\n  );\n};\n\nexport default CardItem;\n","import React from \"react\";\nimport { Image, Text, TouchableOpacity, View } from \"react-native\";\nimport styles from \"../assets/styles\";\nimport { IProfileOneLine } from \"../interfaces/general\";\n\nconst ProfileOneLine = ({\n  image,\n  lastMessage,\n  name,\n  disabled,\n  onPress,\n}: IProfileOneLine) => (\n  <TouchableOpacity onPress={onPress}>\n    <View\n      style={{\n        ...styles.containerMessage,\n        opacity: disabled ? 0.5 : undefined,\n      }}\n    >\n      <Image source={{ uri: image }} style={styles.avatar} />\n      <View>\n        <Text>{name}</Text>\n        <Text\n          style={{\n            ...styles.message,\n            textDecorationLine: disabled ? \"line-through\" : undefined,\n          }}\n        >\n          {lastMessage}\n        </Text>\n      </View>\n    </View>\n  </TouchableOpacity>\n);\n\nexport default ProfileOneLine;\n","import { StyleSheet, Dimensions } from \"react-native\";\nimport { BLACK, DARK_GRAY, GRAY, PRIMARY_COLOR, WHITE } from \".\";\n\nlet SProfileItem = StyleSheet.create({\n  containerProfileItem: {\n    backgroundColor: WHITE,\n    paddingHorizontal: 10,\n    paddingBottom: 25,\n    margin: 20,\n    borderRadius: 8,\n    marginTop: -65,\n    elevation: 1,\n    shadowOpacity: 0.05,\n    shadowRadius: 10,\n    shadowColor: BLACK,\n    shadowOffset: { height: 0, width: 0 },\n  },\n  matchesProfileItem: {\n    width: 135,\n    marginTop: -15,\n    backgroundColor: PRIMARY_COLOR,\n    paddingVertical: 7,\n    paddingHorizontal: 20,\n    borderRadius: 20,\n    alignSelf: \"center\",\n  },\n  matchesTextProfileItem: {\n    color: WHITE,\n    textAlign: \"center\",\n  },\n  name: {\n    paddingTop: 25,\n    paddingBottom: 5,\n    color: DARK_GRAY,\n    fontSize: 15,\n    textAlign: \"center\",\n  },\n  descriptionProfileItem: {\n    color: GRAY,\n    textAlign: \"center\",\n    paddingBottom: 20,\n    fontSize: 13,\n  },\n  infoList: {\n    paddingVertical: 8,\n    justifyContent: \"center\",\n    flexDirection: \"row\",\n  },\n  iconProfile: {\n    fontSize: 12,\n    color: DARK_GRAY,\n    paddingHorizontal: 10,\n  },\n  infoSectionView: {\n    paddingTop: 8,\n    justifyContent: \"center\",\n    zIndex: -1,\n  },\n  infoSectionTitleView: {\n    justifyContent: \"flex-end\",\n  },\n  infoSectionContent: {\n    flex: 1,\n    justifyContent: \"flex-start\",\n  },\n  infoSectionText: {\n    color: GRAY,\n    fontSize: 18,\n  },\n  infoContent: {\n    width: \"100%\",\n    color: DARK_GRAY,\n    fontSize: 18,\n  },\n});\n\nexport default SProfileItem;\n","// Used to check the type's attributes\nexport const ISProfileDisplayItem = {\n  Name: \"name\",\n  FriendshipStage: \"friendshipStage\",\n  LivingAddress: \"livingAddress\",\n  Education: \"education\",\n  Activity: \"activity\",\n  Comment: \"comment\",\n  Todo: \"todo\",\n  ImagePath: \"imagePath\",\n};\n\nexport interface IProfileDisplayItem {\n  name: string;\n  livingAddress?: string[];\n  friendshipStage?: string[];\n  education?: string[];\n  activity?: string[];\n  comment?: string[];\n  todo?: string[];\n  imagePath?: any;\n}\n\n// Used to check the type's attributes\nexport const ISProfileMetaItem = {\n  $id: \"documentId\",\n};\n\nexport interface IProfileMetaItem {\n  documentId: string;\n}\n\nexport interface IProfileItem {\n  display: IProfileDisplayItem;\n  meta: IProfileMetaItem;\n}\n\nexport interface IProfileScreenActivity {\n  friendshipDropdownOpen: boolean;\n  focusItem?: { k: string; index: number };\n}\n\nexport interface ISwipeableItem {\n  onSwipeableCloseCallback(\n    direction: any,\n    onSwipeableCloseCallbackProps: any\n  ): void;\n  onSwipeableCloseCallbackProps?: any;\n}\n\nexport interface IProfileArrayItem {\n  value: string[];\n  valueHandler: any;\n  k: string;\n  profileItem: IProfileItem;\n}\n","import { ToPinYinName } from \"./pinyin\";\n\nexport function Pascalize(str: string | undefined) {\n  if (!str) return \"\";\n  let newStr = str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (word, index) {\n      return word.toUpperCase();\n    })\n    .replace(/\\s+/g, \"\");\n  return newStr;\n}\n\nexport const SnakeCase = (string: string) => {\n  string = string.replace(/\\W+/g, \" \").toLowerCase().split(\" \").join(\"_\");\n\n  if (string.charAt(string.length - 1) === \"_\") {\n    return string.substring(0, string.length - 1);\n  }\n\n  return string;\n};\n\nexport const ProcessName = (name: string) => {\n  name = name.trimStart();\n  return /^[A-Za-z0-9 ]*$/.test(name) ? name.toLowerCase() : ToPinYinName(name);\n};\n\nexport function removeTodoDate(todoStr: string) {\n  return todoStr.startsWith(\"-\") || todoStr.startsWith(\"[\")\n    ? todoStr.slice(todoStr.indexOf(\"]\") + 2).trimStart()\n    : todoStr.trimStart();\n}\n\nexport function updateTodo(todo: string, disabled: boolean) {\n  let lastDash = 0;\n  while (todo && todo.slice(lastDash).startsWith(\"-\")) {\n    lastDash += 1;\n    todo = todo.slice(lastDash);\n  }\n  if (disabled) {\n    todo = \"-\" + todo;\n  }\n  return todo;\n}\n","import simplePinyin from \"simple-pinyin\";\n\nexport const ToPinYinName = (chinese) => {\n  const nameArray = simplePinyin(chinese, { pinyinOnly: false });\n  return nameArray.join(\"\");\n};\n","export const friendshipStage = {\n  \"Role Delimited Interaction\": {\n    description:\n      \"I only meet these people under certain role context; e.g. a stranger sitting near you in a lecture\",\n    example: \"Karim Keddam\",\n  },\n  \"Friendly Relation\": {\n    description:\n      \"Still role delimited, but generally more positive; e.g. coworkers, religious association members, neighbors\",\n    example: \"Leah Wang\",\n  },\n  \"Move-Toward-Friendship\": {\n    description:\n      \"Moving away from what is required in the specific role relationship; Fewer stereotyped lines of interaction; Individual violation of public propriety; e.g. A invited B to get coffee after class, and the other day, B asked A to get lunch after class.\",\n    example: \"Chufeng (Chris) Liang\",\n  },\n  \"Nascent Friendship\": {\n    description:\n      \"100% moved away from specific role; Start to develop norms; Start to be regarded as a pair by the outside forces; May be less faithful to the original friendship.\",\n    example: null,\n  },\n  \"Stabilized Friendship::Active\": {\n    description:\n      \"Less passion as Nascent friendship; When seeing another new Nascent friend of your “duo”, it isn’t going to impact the strength of the relationship; The person can be available for you.\",\n    example: \"Xin Zhang\",\n  },\n  \"Stabilized Friendship::Dormant\": {\n    description:\n      \"Less passion as Nascent friendship; When seeing another new Nascent friend of your “duo”, it isn’t going to impact the strength of the relationship; No interact every day, but still very much alive and grow back to an active friendship if time arises\",\n    example: \"Lounan Li\",\n  },\n  \"Stabilized Friendship::Commemorative\": {\n    description:\n      \"Less passion as Nascent friendship; When seeing another new Nascent friend of your “duo”, it isn’t going to impact the strength of the relationship; Ones reflect a specific space and time with minimal interaction, can’t grow back to an active friendship easily\",\n    example: \"Zhiyan Fang\",\n  },\n};\n","// Used to check the type's attributes\nexport const ISSearchCard = {\n  Name: \"name\",\n  $id: \"documentId\",\n  ImagePath: \"imagePath\",\n};\n\nexport interface ISearchCard {\n  name: string;\n  documentId: string;\n  imagePath?: any;\n  oneline?: boolean;\n}\n\nexport interface ISearchCardScreen {\n  selectedCard: ISearchCard;\n  searchCard: ISearchCard[];\n  longPress: boolean;\n  searchText: string;\n  // it is string because we only need its value to be changed\n  renderScreen?: number;\n}\n","export const TsToStr = (Ts: number) => {\n  const todate = new Date(Ts).getDate();\n  const tomonth = new Date(Ts).getMonth() + 1;\n  const toyear = new Date(Ts).getFullYear();\n  return \"[\" + toyear + \"/\" + tomonth + \"/\" + todate + \"]\";\n};\n\nexport const StrToTs = (s: string) => {\n  return Date.parse(s.slice(1, -2));\n};\n","import { StyleSheet } from \"react-native\";\n\nexport const SSearch = StyleSheet.create({\n  centeredModel: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 15,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n});\n","import { ISProfileDisplayItem } from \"../../interfaces/profile\";\n\nexport const ProfileConfig = {\n  DEFAULT_FOCUS: { key: ISProfileDisplayItem.Activity, index: 0 },\n};\n","import React, { useRef, useState } from \"react\";\nimport {\n  Alert,\n  ListViewBase,\n  Modal,\n  NativeSyntheticEvent,\n  Pressable,\n  Text,\n  TextInput,\n  TextInputKeyPressEventData,\n  View,\n} from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport styles, { WHITE } from \"../../../../../assets/styles\";\nimport SProfileItem from \"../../../../../assets/styles/profileItem\";\nimport { SSearch } from \"../../../../../assets/styles/search\";\nimport { ApiProfileCollection } from \"../../../../../backend/appwrite/service/database/collection/profile\";\nimport { Constants } from \"../../../../../Constants\";\nimport {\n  IProfileArrayItem,\n  IProfileDisplayItem,\n  IProfileScreenActivity,\n  ISProfileDisplayItem,\n} from \"../../../../../interfaces/profile\";\nimport store, { RootState } from \"../../../../../redux_modules\";\nimport {\n  AChangeDisplayProfile,\n  AChangeProfileScreenActivity,\n} from \"../../../../../redux_modules/action\";\nimport { Pascalize } from \"../../../../../utils/stringUtil\";\nimport { ProfileConfig } from \"../../../profileConfig\";\n\nexport const ProfileArrayItem: React.FC<IProfileArrayItem> = ({\n  value,\n  valueHandler,\n  k,\n  profileItem,\n}: IProfileArrayItem) => {\n  const [deleteItem, setDeleteItem] = useState<undefined | any>(undefined);\n  let apiPofile = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  function setInputTextRef(index: number) {\n    if (\n      profileScreenActivity.focusItem?.k == k &&\n      profileScreenActivity.focusItem.index == index\n    ) {\n      return inputTextRef;\n    } else if (!profileScreenActivity.focusItem || !inputTextRef.current) {\n      if (\n        k == ProfileConfig.DEFAULT_FOCUS.key &&\n        index == ProfileConfig.DEFAULT_FOCUS.index\n      ) {\n        return inputTextRef;\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  function moveFocusItem(k: string, index: number, step: 1 | -1) {\n    const keys = Object.values(ISProfileDisplayItem);\n    if (index + step == -1) {\n      // move up to edge\n      return { k: k, index: value.length - 1 };\n    } else if (index + step == value.length) {\n      // move down to edge\n      return { k: k, index: 0 };\n    } else {\n      return { k: k, index: index + step };\n    }\n  }\n\n  let profileScreenActivity: IProfileScreenActivity = useSelector(\n    (state: RootState) => state.profileScreenActivity\n  );\n\n  const inputTextRef: React.MutableRefObject<TextInput | null> = useRef(null);\n\n  return (\n    <>\n      {value.map((v: any, index: any) => {\n        return (\n          <React.Fragment key={index}>\n            <Modal\n              animationType=\"slide\"\n              transparent={true}\n              visible={deleteItem != undefined}\n              onRequestClose={() => {\n                Alert.alert(\"Modal has been closed.\");\n                setDeleteItem(undefined);\n              }}\n            >\n              <View style={SSearch.centeredModel}>\n                <View style={SSearch.modalView}>\n                  <Text style={styles.title}>\n                    Are you sure you want to delete?\n                  </Text>\n                  <View style={{ flexDirection: \"row\" }}>\n                    <Pressable\n                      style={styles.roundedButtonSecondary}\n                      onPress={() => {\n                        let newValue = {\n                          [Pascalize(deleteItem.key)]: deleteItem.data,\n                        };\n                        apiPofile.updateDocument(\n                          profileItem.meta.documentId,\n                          newValue\n                        );\n                        store.dispatch(\n                          AChangeDisplayProfile({\n                            [deleteItem.key]: deleteItem.data,\n                          })\n                        );\n                        setDeleteItem(undefined);\n                      }}\n                    >\n                      <Text style={{ ...styles.bodyBold, color: WHITE }}>\n                        Yes\n                      </Text>\n                    </Pressable>\n                    <Pressable\n                      style={styles.roundedButtonPrimary}\n                      onPress={() => {\n                        setDeleteItem(undefined);\n                      }}\n                    >\n                      <Text style={{ ...styles.bodyBold, color: WHITE }}>\n                        No\n                      </Text>\n                    </Pressable>\n                  </View>\n                </View>\n              </View>\n            </Modal>\n            <View style={SProfileItem.infoList}>\n              <TextInput\n                ref={setInputTextRef(index)}\n                returnKeyType=\"done\"\n                keyboardType=\"default\"\n                value={valueHandler(v)}\n                placeholder={\"New field\"}\n                placeholderTextColor=\"#E6E6E6\"\n                onBlur={(e) => {\n                  let newArray = [...value];\n                  newArray[index] = e.nativeEvent.text;\n                  // delete empty item if not the first item\n                  if (index > 0 && newArray[index].length == 0) {\n                    newArray.splice(index, 1);\n                  }\n                  let data = { [Pascalize(k)]: newArray };\n                  apiPofile.updateDocument(profileItem.meta.documentId, data);\n                  // add empty first line if it becomes none empty\n                  if (newArray && newArray.length > 0 && newArray.at(0) != \"\") {\n                    newArray = [\"\", ...newArray];\n                  }\n                  store.dispatch(AChangeDisplayProfile({ [k]: newArray }));\n                }}\n                onFocus={() => {\n                  store.dispatch(\n                    AChangeProfileScreenActivity({\n                      focusItem: { k: k, index: index },\n                    })\n                  );\n                }}\n                onKeyPress={(\n                  e: NativeSyntheticEvent<TextInputKeyPressEventData>\n                ) => {\n                  switch (e.nativeEvent.key) {\n                    case \"ArrowDown\":\n                      store.dispatch(\n                        AChangeProfileScreenActivity({\n                          focusItem: moveFocusItem(k, index, 1),\n                        })\n                      );\n                      setTimeout(() => {\n                        if (inputTextRef.current) {\n                          inputTextRef.current.focus();\n                        }\n                      }, 50);\n                      return;\n                    case \"ArrowUp\":\n                      store.dispatch(\n                        AChangeProfileScreenActivity({\n                          focusItem: moveFocusItem(k, index, -1),\n                        })\n                      );\n                      setTimeout(() => {\n                        if (inputTextRef.current) {\n                          inputTextRef.current.focus();\n                        }\n                      }, 50);\n                      return;\n                  }\n                }}\n                onLayout={() => {\n                  if (inputTextRef.current) {\n                    inputTextRef.current.focus();\n                  }\n                }}\n                onChangeText={(newValue) => {\n                  let newArray = [...value];\n                  newArray[index] = newValue;\n                  store.dispatch(AChangeDisplayProfile({ [k]: newArray }));\n                }}\n                onSubmitEditing={(event) => {\n                  let newArray = [...value];\n                  // delete focused empty item if not the first item\n                  if (index > 0 && newArray[index].length == 0) {\n                    newArray.splice(index, 1);\n                    store.dispatch(\n                      AChangeProfileScreenActivity({\n                        focusItem: moveFocusItem(k, index, -1),\n                      })\n                    );\n                  } else {\n                    // add empty item after focused non-empty item\n                    newArray.splice(index + 1, 0, \"\");\n                    store.dispatch(\n                      AChangeProfileScreenActivity({\n                        focusItem: {\n                          k: k,\n                          index: Math.min(\n                            Math.max(index + 1, 2),\n                            newArray.length - 1\n                          ),\n                        },\n                      })\n                    );\n                  }\n                  store.dispatch(AChangeDisplayProfile({ [k]: newArray }));\n                }}\n                style={SProfileItem.infoContent}\n              />\n            </View>\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n};\n","import { Ionicons } from \"@expo/vector-icons\";\nimport { Pressable, View } from \"react-native\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport styles from \"../../assets/styles\";\nimport { ICheckbox } from \"../../interfaces/general\";\n\nconst Checkbox = ({ checked, onChecked, textInputProps }: ICheckbox) => {\n  return (\n    <View style={styles.checkboxView}>\n      <Pressable\n        style={[styles.checkboxBase, checked && styles.checkboxChecked]}\n        onPress={onChecked}\n      >\n        {checked ? (\n          <Ionicons name=\"checkmark\" size={20} style={styles.checkIcon} />\n        ) : undefined}\n      </Pressable>\n      <TextInput\n        {...textInputProps}\n        style={{\n          ...textInputProps.style,\n          textDecorationLine: checked ? \"line-through\" : undefined,\n        }}\n      />\n    </View>\n  );\n};\n\nexport default Checkbox;\n","import React, { useRef, useState } from \"react\";\nimport {\n  Alert,\n  Modal,\n  NativeSyntheticEvent,\n  Pressable,\n  Text,\n  TextInput,\n  TextInputKeyPressEventData,\n  View,\n} from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport styles, { WHITE } from \"../../../../../assets/styles\";\nimport SProfileItem from \"../../../../../assets/styles/profileItem\";\nimport { SSearch } from \"../../../../../assets/styles/search\";\nimport { ApiProfileCollection } from \"../../../../../backend/appwrite/service/database/collection/profile\";\nimport { Constants } from \"../../../../../Constants\";\nimport {\n  IProfileArrayItem,\n  IProfileScreenActivity,\n  ISProfileDisplayItem,\n} from \"../../../../../interfaces/profile\";\nimport store, { RootState } from \"../../../../../redux_modules\";\nimport {\n  AChangeDisplayProfile,\n  AChangeProfileScreenActivity,\n} from \"../../../../../redux_modules/action\";\nimport { Pascalize, updateTodo } from \"../../../../../utils/stringUtil\";\nimport Checkbox from \"../../../../common/checkbox\";\nimport { ProfileConfig } from \"../../../profileConfig\";\n\nexport const ProfileTodoArrayItem: React.FC<IProfileArrayItem> = ({\n  value,\n  valueHandler,\n  k,\n  profileItem,\n}: IProfileArrayItem) => {\n  const [deleteItem, setDeleteItem] = useState<undefined | any>(undefined);\n  let apiPofile = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  function setInputTextRef(index: number) {\n    if (\n      profileScreenActivity.focusItem?.k == k &&\n      profileScreenActivity.focusItem.index == index\n    ) {\n      return inputTextRef;\n    } else if (!profileScreenActivity.focusItem || !inputTextRef.current) {\n      if (\n        k == ProfileConfig.DEFAULT_FOCUS.key &&\n        index == ProfileConfig.DEFAULT_FOCUS.index\n      ) {\n        return inputTextRef;\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  function moveFocusItem(k: string, index: number, step: 1 | -1) {\n    const keys = Object.values(ISProfileDisplayItem);\n    if (index + step == -1) {\n      // move up to edge\n      return { k: k, index: value.length - 1 };\n    } else if (index + step == value.length) {\n      // move down to edge\n      return { k: k, index: 0 };\n    } else {\n      return { k: k, index: index + step };\n    }\n  }\n\n  let profileScreenActivity: IProfileScreenActivity = useSelector(\n    (state: RootState) => state.profileScreenActivity\n  );\n\n  const inputTextRef: React.MutableRefObject<TextInput | null> = useRef(null);\n\n  return (\n    <>\n      {value.map((v: any, index: any) => {\n        const checked = v && v.startsWith(\"-\");\n        return (\n          <React.Fragment key={index}>\n            <Modal\n              animationType=\"slide\"\n              transparent={true}\n              visible={deleteItem != undefined}\n              onRequestClose={() => {\n                Alert.alert(\"Modal has been closed.\");\n                setDeleteItem(undefined);\n              }}\n            >\n              <View style={SSearch.centeredModel}>\n                <View style={SSearch.modalView}>\n                  <Text style={styles.title}>\n                    Are you sure you want to delete?\n                  </Text>\n                  <View style={{ flexDirection: \"row\" }}>\n                    <Pressable\n                      style={styles.roundedButtonSecondary}\n                      onPress={() => {\n                        let newValue = {\n                          [Pascalize(deleteItem.key)]: deleteItem.data,\n                        };\n                        apiPofile.updateDocument(\n                          profileItem.meta.documentId,\n                          newValue\n                        );\n                        store.dispatch(\n                          AChangeDisplayProfile({\n                            [deleteItem.key]: deleteItem.data,\n                          })\n                        );\n                        setDeleteItem(undefined);\n                      }}\n                    >\n                      <Text style={{ ...styles.bodyBold, color: WHITE }}>\n                        Yes\n                      </Text>\n                    </Pressable>\n                    <Pressable\n                      style={styles.roundedButtonPrimary}\n                      onPress={() => {\n                        setDeleteItem(undefined);\n                      }}\n                    >\n                      <Text style={{ ...styles.bodyBold, color: WHITE }}>\n                        No\n                      </Text>\n                    </Pressable>\n                  </View>\n                </View>\n              </View>\n            </Modal>\n            <View style={SProfileItem.infoList}>\n              <Checkbox\n                checked={checked}\n                onChecked={() => {\n                  const newTodo = updateTodo(v, !checked);\n                  let newArray = [...value];\n                  newArray[index] = newTodo;\n                  store.dispatch(AChangeDisplayProfile({ [k]: newArray }));\n                  if (index > 0 && newArray[index].length == 0) {\n                    newArray.splice(index, 1);\n                  }\n                  let data = { [Pascalize(k)]: newArray };\n                  apiPofile.updateDocument(profileItem.meta.documentId, data);\n                }}\n                textInputProps={{\n                  ref: setInputTextRef(index),\n                  returnKeyType: \"done\",\n                  keyboardType: \"default\",\n                  value: valueHandler(updateTodo(v, false)),\n                  placeholder: \"New field\",\n                  placeholderTextColor: \"#E6E6E6\",\n                  onBlur: (e: any) => {\n                    let newArray = [...value];\n                    newArray[index] = e.nativeEvent.text;\n                    // delete empty item if not the first item\n                    if (index > 0 && newArray[index].length == 0) {\n                      newArray.splice(index, 1);\n                    }\n                    let data = { [Pascalize(k)]: newArray };\n                    apiPofile.updateDocument(profileItem.meta.documentId, data);\n                    // add empty first line if it becomes none empty\n                    if (\n                      newArray &&\n                      newArray.length > 0 &&\n                      newArray.at(0) != \"\"\n                    ) {\n                      newArray = [\"\", ...newArray];\n                    }\n                    store.dispatch(AChangeDisplayProfile({ [k]: newArray }));\n                  },\n                  onFocus: () => {\n                    store.dispatch(\n                      AChangeProfileScreenActivity({\n                        focusItem: { k: k, index: index },\n                      })\n                    );\n                  },\n                  onKeyPress: (\n                    e: NativeSyntheticEvent<TextInputKeyPressEventData>\n                  ) => {\n                    switch (e.nativeEvent.key) {\n                      case \"ArrowDown\":\n                        store.dispatch(\n                          AChangeProfileScreenActivity({\n                            focusItem: moveFocusItem(k, index, 1),\n                          })\n                        );\n                        setTimeout(() => {\n                          if (inputTextRef.current) {\n                            inputTextRef.current.focus();\n                          }\n                        }, 50);\n                        return;\n                      case \"ArrowUp\":\n                        store.dispatch(\n                          AChangeProfileScreenActivity({\n                            focusItem: moveFocusItem(k, index, -1),\n                          })\n                        );\n                        setTimeout(() => {\n                          if (inputTextRef.current) {\n                            inputTextRef.current.focus();\n                          }\n                        }, 50);\n                        return;\n                    }\n                  },\n                  onLayout: () => {\n                    if (inputTextRef.current) {\n                      inputTextRef.current.focus();\n                    }\n                  },\n                  onChangeText: (newValue: any) => {\n                    let newArray = [...value];\n                    newArray[index] = newValue;\n                    store.dispatch(AChangeDisplayProfile({ [k]: newArray }));\n                  },\n                  onSubmitEditing: (event: any) => {\n                    let newArray = [...value];\n                    // delete focused empty item if not the first item\n                    if (index > 0 && newArray[index].length == 0) {\n                      newArray.splice(index, 1);\n                      store.dispatch(\n                        AChangeProfileScreenActivity({\n                          focusItem: moveFocusItem(k, index, -1),\n                        })\n                      );\n                    } else {\n                      // add empty item after focused non-empty item\n                      newArray.splice(index + 1, 0, \"\");\n                      store.dispatch(\n                        AChangeProfileScreenActivity({\n                          focusItem: {\n                            k: k,\n                            index: Math.min(\n                              Math.max(index + 1, 2),\n                              newArray.length - 1\n                            ),\n                          },\n                        })\n                      );\n                    }\n                    store.dispatch(AChangeDisplayProfile({ [k]: newArray }));\n                  },\n                  style: SProfileItem.infoContent,\n                }}\n              />\n            </View>\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { TextInput } from \"react-native\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nimport SProfileItem from \"../../../assets/styles/profileItem\";\nimport { ApiProfileCollection } from \"../../../backend/appwrite/service/database/collection/profile\";\nimport { friendshipStage } from \"../../../backend/constants\";\nimport { Constants } from \"../../../Constants\";\nimport {\n  IProfileItem,\n  IProfileScreenActivity,\n  ISProfileDisplayItem,\n} from \"../../../interfaces/profile\";\nimport { ISSearchCard } from \"../../../interfaces/search\";\nimport store from \"../../../redux_modules\";\nimport {\n  AChangeDisplayProfile,\n  AChangeProfileScreenActivity,\n  AChangeSingleSearchCard,\n} from \"../../../redux_modules/action\";\nimport { TsToStr } from \"../../../utils/dateUtil\";\nimport { Pascalize } from \"../../../utils/stringUtil\";\nimport { ProfileArrayItem } from \"./profileItemRender/profileArrayItem/profileArrayItem\";\nimport { ProfileTodoArrayItem } from \"./profileItemRender/profileTodoItem/profileTodoArrayItem\";\n\nexport const ProfileItemRender = (\n  profileItem: IProfileItem,\n  profileScreenActivity: IProfileScreenActivity,\n  key: any,\n  value: any\n) => {\n  let apiPofile = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  const addDateString = (s: string, prefix: string = \" \") => {\n    if (s.startsWith(prefix)) {\n      s = TsToStr(Date.now()) + s;\n    }\n    return s;\n  };\n\n  switch (typeof value) {\n    case \"string\": {\n      return (\n        <TextInput\n          value={value}\n          onBlur={(e) => {\n            const text = e.nativeEvent.text.trimStart();\n            let data = { [Pascalize(key)]: text };\n            apiPofile.updateDocument(profileItem.meta.documentId, data);\n            // #TODO: here we only assumed search card are made of string fields in profile,\n            // which can change in the future\n            if (Object.values(ISSearchCard).includes(key)) {\n              store.dispatch(\n                AChangeSingleSearchCard({\n                  documentId: profileItem.meta.documentId,\n                  [key]: text,\n                })\n              );\n            }\n          }}\n          onChangeText={(newValue) => {\n            store.dispatch(AChangeDisplayProfile({ [key]: newValue }));\n          }}\n          style={SProfileItem.infoContent}\n        />\n      );\n    }\n    case \"object\": {\n      switch (key) {\n        // TODO: this case can be extended to a general dropdown\n        case ISProfileDisplayItem.FriendshipStage: {\n          return (\n            <DropDownPicker\n              multiple\n              autoScroll\n              mode=\"BADGE\"\n              extendableBadgeContainer\n              textStyle={SProfileItem.infoContent}\n              style={{\n                borderWidth: 0,\n                paddingLeft: 0,\n                paddingTop: 0,\n                paddingBottom: 0,\n              }}\n              open={profileScreenActivity.friendshipDropdownOpen}\n              value={\n                profileItem.display.friendshipStage\n                  ? profileItem.display.friendshipStage\n                  : null\n              }\n              items={Object.keys(friendshipStage).map(function (e, i) {\n                return { label: e, value: e };\n              })}\n              setOpen={() => {\n                store.dispatch(\n                  AChangeProfileScreenActivity({\n                    friendshipDropdownOpen:\n                      !profileScreenActivity.friendshipDropdownOpen,\n                  })\n                );\n              }}\n              setValue={(callback: any) => {\n                return callback(profileItem.display.friendshipStage);\n              }}\n              onSelectItem={(newItem) => {\n                let newArray = newItem.map(function (e, i) {\n                  return e.value;\n                });\n                store.dispatch(\n                  AChangeDisplayProfile({\n                    [key]: newArray,\n                  })\n                );\n                apiPofile.updateDocument(profileItem.meta.documentId, {\n                  [Pascalize(key)]: newArray,\n                });\n              }}\n            />\n          );\n        }\n        case ISProfileDisplayItem.ImagePath: {\n          return;\n        }\n        case ISProfileDisplayItem.Todo: {\n          return (\n            <ProfileTodoArrayItem\n              value={value}\n              valueHandler={addDateString}\n              k={key}\n              profileItem={profileItem}\n            />\n          );\n        }\n        default: {\n          // default is string[]\n          if (key) {\n            if (!value || value.length === 0) {\n              value = [\"\"];\n            }\n            return (\n              <ProfileArrayItem\n                value={value}\n                valueHandler={addDateString}\n                k={key}\n                profileItem={profileItem}\n              />\n            );\n          }\n        }\n      }\n    }\n  }\n};\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport SProfileItem from \"../../assets/styles/profileItem\";\nimport {\n  IProfileDisplayItem,\n  IProfileItem,\n  IProfileScreenActivity,\n  ISProfileDisplayItem,\n} from \"../../interfaces/profile\";\nimport { RootState } from \"../../redux_modules\";\nimport { Pascalize } from \"../../utils/stringUtil\";\nimport { ProfileItemRender } from \"./profileItem/profileItemRender\";\n\nconst ProfileItem = () => {\n  let profileItem: IProfileItem = useSelector(\n    (state: RootState) => state.profile\n  );\n  let profileDisplayItem: IProfileDisplayItem = profileItem.display;\n  let profileScreenActivity: IProfileScreenActivity = useSelector(\n    (state: RootState) => state.profileScreenActivity\n  );\n\n  return (\n    <View style={SProfileItem.containerProfileItem}>\n      {Object.values(profileDisplayItem).map((value: any, index) => {\n        if (\n          Object.keys(profileDisplayItem).at(index)!.at(0) !== \"$\" &&\n          Object.keys(profileDisplayItem).at(index)! !==\n            ISProfileDisplayItem.ImagePath\n        )\n          return (\n            // zIndex should be high if the display item is dropdown\n            // #TODO: make it more generic instead of hardcoded\n            <View\n              key={index}\n              style={{\n                ...SProfileItem.infoSectionView,\n                zIndex:\n                  Object.keys(profileDisplayItem).at(index) ===\n                  ISProfileDisplayItem.FriendshipStage\n                    ? 1\n                    : 0,\n              }}\n            >\n              <View style={SProfileItem.infoSectionTitleView}>\n                <Text style={SProfileItem.infoSectionText}>\n                  {Pascalize(Object.keys(profileDisplayItem).at(index))}\n                  :&nbsp;\n                </Text>\n              </View>\n\n              <View style={SProfileItem.infoSectionContent}>\n                {ProfileItemRender(\n                  profileItem,\n                  profileScreenActivity,\n                  Object.keys(profileDisplayItem).at(index),\n                  value\n                )}\n              </View>\n            </View>\n          );\n      })}\n    </View>\n  );\n};\n\nexport default ProfileItem;\n","import { FileUploader } from \"react-drag-drop-files\";\nimport { ImageBackground, TouchableOpacity } from \"react-native\";\nimport styles from \"../../../assets/styles\";\n\nexport const ProfileImage = (props: any) => {\n  return (\n    <TouchableOpacity onPress={props.onPressCallback}>\n      <FileUploader onDrop={props.onDrop}>\n        <ImageBackground source={{ uri: props.url }} style={styles.photo} />\n      </FileUploader>\n    </TouchableOpacity>\n  );\n};\n\nexport default ProfileImage;\n","export const objectFilterKey = (o: any, map: any) => {\n  return Object.keys(map).reduce((acc, key) => {\n    if (Object.keys(o).includes(key)) {\n      return {\n        ...acc,\n        ...{ [key]: o[key] },\n      };\n    } else {\n      return { ...acc };\n    }\n  }, {});\n};\n\nexport const objectMapKey = (o: any, map: any) => {\n  return Object.keys(o).reduce((acc, key) => {\n    return {\n      ...acc,\n      ...{ [map[key] || key]: o[key] },\n    };\n  }, {});\n};\n\nexport const objectAddOneStartEmptyStrToArray = (\n  o: any,\n  exception: string[] = [\"imagePath\", \"education\", \"livingAddress\"]\n) => {\n  return Object.keys(o).reduce((acc, key) => {\n    if (Array.isArray(o[key]) && !exception.includes(key)) {\n      const newValue = [\"\", ...objectRemoveEmptyStr(o[key])];\n      return {\n        ...acc,\n        ...{ [key]: newValue },\n      };\n    }\n    return {\n      ...acc,\n      ...{ [key]: o[key] },\n    };\n  }, {});\n};\n\nexport const objectRemoveEmptyStr = (o: string[]) => {\n  return o.filter((v: string) => {\n    return v && v.length > 0;\n  });\n};\n\nexport const groupBy = <T, K extends keyof any>(\n  list: T[],\n  getKey: (item: T) => K\n) =>\n  list.reduce((previous, currentItem) => {\n    const group = getKey(currentItem);\n    if (!previous[group]) previous[group] = [];\n    previous[group].push(currentItem);\n    return previous;\n  }, {} as Record<K, T[]>);\n","import { useFocusEffect } from \"@react-navigation/native\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  KeyboardAvoidingView,\n  RefreshControl,\n  ScrollView,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport GestureRecognizer from \"react-native-swipe-gestures\";\nimport { useSelector } from \"react-redux\";\nimport styles, { WHITE } from \"../assets/styles\";\nimport { ApiProfileCollection } from \"../backend/appwrite/service/database/collection/profile\";\nimport { ApiProfileBucket } from \"../backend/appwrite/service/storage/bucket/profile\";\nimport { Icon, ProfileItem } from \"../components\";\nimport { ProfileImage } from \"../components/profile/profileImage/profileImage\";\nimport { Constants } from \"../Constants\";\nimport {\n  IProfileItem,\n  ISProfileDisplayItem,\n  ISProfileMetaItem,\n} from \"../interfaces/profile\";\nimport { ISearchCardScreen } from \"../interfaces/search\";\nimport store, { RootState } from \"../redux_modules\";\nimport {\n  AChangeDisplayProfile,\n  AChangeMetaProfile,\n  AChangeSingleSearchCard,\n} from \"../redux_modules/action\";\nimport {\n  EMPTY_CARD,\n  NEW_CARD,\n} from \"../redux_modules/reducer/change_search_card_screen\";\nimport { PickImage } from \"../utils/cameraUtil\";\nimport {\n  objectAddOneStartEmptyStrToArray,\n  objectFilterKey,\n  objectMapKey,\n} from \"../utils/objectUtil\";\nimport { SnakeCase } from \"../utils/stringUtil\";\n\nconst Profile = ({ navigation }: { navigation: any }) => {\n  let apiProfileCollection = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  let apiProfileBucket = new ApiProfileBucket(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.BKT_NAMECARD_ID\n  );\n\n  let searchCardScreen: ISearchCardScreen = useSelector(\n    (state: RootState) => state.searchCardScreen\n  );\n\n  let profileItem: IProfileItem = useSelector(\n    (state: RootState) => state.profile\n  );\n\n  const updateImage = async (url: string, fileName: string, file?: File) => {\n    profileItem.display.imagePath.map((img: string) => {\n      apiProfileBucket.deleteFile(img);\n    });\n    console.log(\"Uploading new image\");\n    const response: any = await apiProfileBucket.createFile(\n      url,\n      fileName,\n      file\n    );\n    const fileId = response.$id;\n    const newImagePath: string[] = [fileId];\n    // Update states\n    store.dispatch(AChangeDisplayProfile({ imagePath: newImagePath }));\n    store.dispatch(\n      AChangeSingleSearchCard({\n        documentId: profileItem.meta.documentId,\n        imagePath: newImagePath,\n      })\n    );\n\n    // Update DB\n    apiProfileCollection.updateByDocumentId(profileItem.meta.documentId, {\n      ImagePath: newImagePath,\n    });\n  };\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result: any = await PickImage();\n\n    const fileName = SnakeCase(profileItem.display.name + \" 1\");\n\n    if (!result.canceled) {\n      updateImage(result.assets[0].uri, fileName);\n    }\n  };\n\n  const dropImage = async (file: File) => {\n    console.log(\"received dropping file\", file);\n    const fileName = SnakeCase(profileItem.display.name + \" 1\");\n    updateImage(\"\", fileName, file);\n  };\n\n  const [refreshing, setRefreshing] = useState<boolean>(false);\n\n  useFocusEffect(\n    useCallback(() => {\n      if (\n        searchCardScreen.selectedCard.documentId &&\n        searchCardScreen.selectedCard.documentId !== EMPTY_CARD.documentId &&\n        searchCardScreen.selectedCard.documentId !== NEW_CARD.documentId\n      ) {\n        let promise = apiProfileCollection.queryByDocumentId(\n          searchCardScreen.selectedCard.documentId\n        );\n        promise.then(\n          function (response: any) {\n            let newDisplayState = objectAddOneStartEmptyStrToArray(\n              objectMapKey(\n                objectFilterKey(response.documents[0], ISProfileDisplayItem),\n                ISProfileDisplayItem\n              )\n            );\n            let newMetaState = objectMapKey(\n              objectFilterKey(response.documents[0], ISProfileMetaItem),\n              ISProfileMetaItem\n            );\n            console.log(\"set profile state\", {\n              display: newDisplayState,\n              meta: newMetaState,\n            });\n            store.dispatch(AChangeDisplayProfile(newDisplayState));\n            store.dispatch(AChangeMetaProfile(newMetaState));\n          },\n          function (error: any) {\n            console.error(error);\n          }\n        );\n      }\n      setRefreshing(false);\n    }, [searchCardScreen.selectedCard.documentId, refreshing])\n  );\n\n  const ProfileImageCaller = () => {\n    return (\n      <ProfileImage\n        onPressCallback={async () => {\n          console.log(\"Opening photo library\");\n          return await pickImage();\n        }}\n        url={\n          profileItem.display.imagePath &&\n          profileItem.display.imagePath.length > 0\n            ? apiProfileBucket\n                .getFilePreview(profileItem.display.imagePath.at(0))\n                .toString()\n            : undefined\n        }\n        onDrop={dropImage}\n      ></ProfileImage>\n    );\n  };\n\n  return (\n    <KeyboardAvoidingView\n      behavior=\"position\"\n      style={{\n        height: \"100%\",\n        alignItems: \"center\",\n      }}\n    >\n      <ScrollView\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={() => {\n              setRefreshing(true);\n            }}\n          />\n        }\n        style={styles.containerProfile}\n      >\n        <GestureRecognizer\n          style={{ flex: 1 }}\n          onSwipeRight={() => {\n            navigation.goBack();\n          }}\n        >\n          <ProfileImageCaller />\n        </GestureRecognizer>\n        <View style={styles.top}>\n          <TouchableOpacity>\n            <Icon\n              name=\"chevron-back\"\n              size={20}\n              color={WHITE}\n              style={styles.topIconLeft}\n            />\n          </TouchableOpacity>\n\n          <TouchableOpacity>\n            <Icon\n              name=\"ellipsis-vertical\"\n              size={20}\n              color={WHITE}\n              style={styles.topIconRight}\n            />\n          </TouchableOpacity>\n        </View>\n        <ProfileItem />\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};\n\nexport default Profile;\n","import { useFocusEffect } from \"@react-navigation/native\";\nimport React, { useCallback, useRef, useState } from \"react\";\nimport {\n  Alert,\n  FlatList,\n  ImageBackground,\n  Modal,\n  Pressable,\n  RefreshControl,\n  SectionList,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { useSelector } from \"react-redux\";\nimport styles, { WHITE } from \"../assets/styles\";\nimport { SSearch } from \"../assets/styles/search\";\nimport { ApiProfileCollection } from \"../backend/appwrite/service/database/collection/profile\";\nimport { CardItem } from \"../components\";\nimport { Constants } from \"../Constants\";\nimport {\n  ISearchCard,\n  ISearchCardScreen,\n  ISSearchCard,\n} from \"../interfaces/search\";\nimport store, { RootState } from \"../redux_modules\";\nimport { AChangeSearchCardScreen } from \"../redux_modules/action\";\nimport {\n  EMPTY_CARD,\n  NEW_CARD,\n} from \"../redux_modules/reducer/change_search_card_screen\";\nimport { objectFilterKey, objectMapKey } from \"../utils/objectUtil\";\nimport { ProcessName } from \"../utils/stringUtil\";\n\nconst Search = ({ navigation }: { navigation: any }) => {\n  let apiProfileCollection = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  let searchCardScreen: ISearchCardScreen = useSelector(\n    (state: RootState) => state.searchCardScreen\n  );\n\n  const [refreshing, setRefreshing] = useState<boolean>(false);\n\n  function namecardArrayToSection(namecardArray: ISearchCard[]) {\n    const namecardObject = namecardArray.reduce((acc: any, nc: any) => {\n      const processedName = ProcessName(nc.name);\n      processedName.startsWith(\n        searchCardScreen.searchText\n          ? searchCardScreen.searchText.toLowerCase()\n          : \" \"\n      );\n      const firstLetter = processedName.at(0) ? processedName.at(0) : \"\";\n      acc[firstLetter] = acc[firstLetter] || [];\n      acc[firstLetter].push(nc);\n      return acc;\n    }, {});\n    return Object.keys(namecardObject).map((k) => {\n      return { title: k.toUpperCase(), data: namecardObject[k] };\n    });\n  }\n\n  useFocusEffect(\n    useCallback(() => {\n      let promise = apiProfileCollection.listDocument();\n      promise.then(\n        function (response: any) {\n          let newSearchState = {\n            searchCard: response.documents\n              .map((e: ISearchCard) => {\n                return objectMapKey(\n                  objectFilterKey(e, ISSearchCard),\n                  ISSearchCard\n                );\n              })\n              .sort((a: ISearchCard, b: ISearchCard) => {\n                return ProcessName(a.name) < ProcessName(b.name) ? -1 : 1;\n              }),\n            selectedCard: EMPTY_CARD,\n          };\n          if (\n            searchCardScreen.selectedCard.documentId != EMPTY_CARD.documentId\n          ) {\n            let newSelectedCard = newSearchState.searchCard.filter(\n              (e: ISearchCard) => {\n                return e.documentId == searchCardScreen.selectedCard.documentId;\n              }\n            );\n            if (newSelectedCard.length == 1) {\n              newSearchState.selectedCard = newSelectedCard.at(0);\n            }\n          }\n          newSearchState.searchCard.unshift(NEW_CARD);\n          console.log(\"set search state\", newSearchState);\n          store.dispatch(AChangeSearchCardScreen(newSearchState));\n        },\n        function (error: any) {\n          console.error(error);\n        }\n      );\n      setRefreshing(false);\n    }, [searchCardScreen.renderScreen])\n  );\n\n  const searchInputRef: React.MutableRefObject<TextInput | null> = useRef(null);\n\n  return (\n    <ImageBackground\n      source={require(\"../assets/images/bg.png\")}\n      style={styles.bg}\n    >\n      <View style={styles.containerMatches}>\n        <View style={styles.top}>\n          <TextInput\n            ref={searchInputRef}\n            placeholder={\"Search name\"}\n            onLayout={() => {\n              searchInputRef.current!.focus();\n            }}\n            style={styles.title}\n            value={searchCardScreen.searchText}\n            onChangeText={(v) => {\n              store.dispatch(AChangeSearchCardScreen({ searchText: v }));\n              if (v === \" \") {\n                console.log(\"Creating a new namecard\");\n                const promise = apiProfileCollection.createDocument({\n                  Name: NEW_CARD.name,\n                });\n                promise.then(\n                  function (response: any) {\n                    store.dispatch(\n                      AChangeSearchCardScreen({\n                        renderScreen: Math.random(),\n                        selectedCard: {\n                          name: response.Name,\n                          documentId: response.$id,\n                          imagePath: response.ImagePath,\n                        },\n                      })\n                    );\n                  },\n                  function (error: any) {\n                    console.error(error);\n                  }\n                );\n                navigation.navigate(\"Profile\");\n                store.dispatch(AChangeSearchCardScreen({ searchText: \"\" }));\n              }\n            }}\n          ></TextInput>\n        </View>\n\n        <SectionList\n          keyboardDismissMode=\"on-drag\"\n          refreshControl={\n            <RefreshControl\n              refreshing={refreshing}\n              onRefresh={() => {\n                store.dispatch(\n                  AChangeSearchCardScreen({ renderScreen: Math.random() })\n                );\n                setRefreshing(true);\n              }}\n            />\n          }\n          sections={namecardArrayToSection(searchCardScreen.searchCard)}\n          renderSectionHeader={({ section: { title } }) => (\n            <Text style={styles.title}>{title}</Text>\n          )}\n          keyExtractor={(item, index) => index.toString()}\n          renderItem={({ item }) => (\n            <TouchableOpacity\n              onPress={() => {\n                store.dispatch(\n                  AChangeSearchCardScreen({\n                    selectedCard: item,\n                  })\n                );\n                if (!searchCardScreen.longPress) {\n                  navigation.navigate(\"Profile\");\n                }\n              }}\n              onLongPress={() => {\n                store.dispatch(\n                  AChangeSearchCardScreen({\n                    longPress: !searchCardScreen.longPress,\n                  })\n                );\n              }}\n              style={{ flex: 1 }}\n            >\n              <CardItem {...item} oneline />\n              <View style={SSearch.centeredModel}>\n                <Modal\n                  animationType=\"slide\"\n                  transparent={true}\n                  visible={\n                    searchCardScreen.longPress &&\n                    searchCardScreen.selectedCard.documentId == item.documentId\n                  }\n                  onRequestClose={() => {\n                    Alert.alert(\"Modal has been closed.\");\n                    store.dispatch(\n                      AChangeSearchCardScreen({\n                        selectedCard: EMPTY_CARD,\n                      })\n                    );\n                  }}\n                >\n                  <View style={SSearch.centeredModel}>\n                    <View style={SSearch.modalView}>\n                      <Text style={styles.title}>\n                        Are you sure you want to delete{\" \"}\n                        <Text style={styles.bodyBold}>{item.name}'s</Text>{\" \"}\n                        namecard?\n                      </Text>\n                      <View style={{ flexDirection: \"row\" }}>\n                        <Pressable\n                          style={styles.roundedButtonSecondary}\n                          onPress={() => {\n                            console.log(\"Deleting card\", item);\n                            apiProfileCollection.deleteDocument(\n                              item.documentId\n                            );\n                            let newSearchCard = [\n                              ...searchCardScreen.searchCard,\n                            ].filter((i) => {\n                              return i.documentId != item.documentId;\n                            });\n                            store.dispatch(\n                              AChangeSearchCardScreen({\n                                searchCard: newSearchCard,\n                                selectedCard: EMPTY_CARD,\n                              })\n                            );\n                          }}\n                        >\n                          <Text style={{ ...styles.bodyBold, color: WHITE }}>\n                            Yes\n                          </Text>\n                        </Pressable>\n                        <Pressable\n                          style={styles.roundedButtonPrimary}\n                          onPress={() =>\n                            store.dispatch(\n                              AChangeSearchCardScreen({\n                                selectedCard: EMPTY_CARD,\n                              })\n                            )\n                          }\n                        >\n                          <Text style={{ ...styles.bodyBold, color: WHITE }}>\n                            No\n                          </Text>\n                        </Pressable>\n                      </View>\n                    </View>\n                  </View>\n                </Modal>\n              </View>\n            </TouchableOpacity>\n          )}\n        />\n      </View>\n    </ImageBackground>\n  );\n};\n\nexport default Search;\n","import { StyleSheet } from \"react-native\";\nimport { DIMENSION_WIDTH, STAR_ACTIONS } from \".\";\n\nexport const STodo = StyleSheet.create({\n  todoSection: {\n    flex: 1,\n    alignSelf: \"center\",\n    flexDirection: \"row\",\n    // paddingleft: 40,\n    // paddingRight: 20,\n    marginTop: 80,\n    width: DIMENSION_WIDTH - 50,\n    position: \"relative\",\n  },\n  switchView: {\n    position: \"absolute\",\n    right: 0,\n    zIndex: 20,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  todoFlatList: {\n    paddingTop: 30,\n  },\n  highlightDateView: {\n    backgroundColor: STAR_ACTIONS,\n    borderRadius: 10,\n    padding: 10,\n  },\n  normalDateView: {\n    padding: 10,\n  },\n});\n","import React, { MutableRefObject, useRef, useState } from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\nimport { ScrollView, Switch } from \"react-native-gesture-handler\";\nimport { useSelector } from \"react-redux\";\nimport styles, {\n  DISABLE_COLOR,\n  GRAY,\n  PRIMARY_COLOR,\n  SECONDARY_COLOR,\n  WHITE,\n} from \"../../assets/styles\";\nimport { STodo } from \"../../assets/styles/todo\";\nimport { ApiProfileCollection } from \"../../backend/appwrite/service/database/collection/profile\";\nimport { ApiProfileBucket } from \"../../backend/appwrite/service/storage/bucket/profile\";\nimport { ProfileOneLine } from \"../../components\";\nimport { Constants } from \"../../Constants\";\nimport { ISProfileDisplayItem } from \"../../interfaces/profile\";\nimport { ITodoItem, ITodoItems } from \"../../interfaces/todo\";\nimport store, { RootState } from \"../../redux_modules\";\nimport { AChangeTodo } from \"../../redux_modules/action\";\nimport { TsToStr } from \"../../utils/dateUtil\";\nimport { objectFilterKey, objectMapKey } from \"../../utils/objectUtil\";\nimport { removeTodoDate, updateTodo } from \"../../utils/stringUtil\";\n\nexport function convertTodoItemToTodoList(todoItems: ITodoItems[]) {\n  let todoList: any = {};\n  todoItems.map((i: ITodoItems) => {\n    if (i.todo && i.todo.length > 0) {\n      i.todo.map((todo: string) => {\n        if (todo && todo.length > 0) {\n          let date = \"Unknown\";\n          let disabled = false;\n          if (todo.at(0) == \"[\") {\n            const todoStart = todo.indexOf(\"]\");\n            date = todo.slice(1, todoStart);\n          } else if (todo.at(0) == \"-\") {\n            if (todo.at(1) == \"[\") {\n              const todoStart = todo.indexOf(\"]\");\n              date = todo.slice(2, todoStart);\n            }\n            disabled = true;\n          }\n          const newItem = {\n            documentId: i.documentId,\n            name: i.name,\n            todo: todo,\n            imagePath: i.imagePath ? i.imagePath.at(0) : undefined,\n            disabled: disabled,\n          };\n          if (!todoList[date] || todoList[date].length == 0) {\n            todoList[date] = [newItem];\n          } else {\n            todoList[date].push(newItem);\n          }\n        }\n      });\n    }\n  });\n  const orderedTodoList = Object.keys(todoList)\n    .sort((a, b) => b.localeCompare(a))\n    .reduce((obj: any, key: any) => {\n      obj[key] = todoList[key];\n      return obj;\n    }, {});\n\n  return orderedTodoList;\n}\n\nfunction toggleTodo(\n  date: string,\n  todoItem: ITodoItem[],\n  index: number,\n  apiProfileCollection: any\n) {\n  const newItem = todoItem.map((item, idx) => {\n    if (idx == index) {\n      let itemTmp = { ...item };\n      itemTmp.disabled = itemTmp.disabled ? false : true;\n      return itemTmp;\n    }\n    return { ...item };\n  });\n\n  store.dispatch(\n    AChangeTodo({\n      [date]: newItem,\n    })\n  );\n\n  //   save this change to profile\n  let promise = apiProfileCollection.queryByDocumentId(\n    todoItem[index].documentId\n  );\n  promise.then(\n    function (response: any) {\n      let newDisplayState: any = objectMapKey(\n        objectFilterKey(response.documents[0], ISProfileDisplayItem),\n        ISProfileDisplayItem\n      );\n      const newTodo = newDisplayState.todo.map((todoStr: string) => {\n        if (todoItem[index].todo == todoStr) {\n          return updateTodo(todoItem[index].todo, !todoItem[index].disabled);\n        }\n        return todoStr;\n      });\n      apiProfileCollection.updateByDocumentId(todoItem[index].documentId, {\n        Todo: newTodo,\n      });\n    },\n    function (error: any) {\n      console.error(error);\n    }\n  );\n}\n\nexport const TodoSection = (refreshControl: any) => {\n  let todoList: any = useSelector((state: RootState) => state.todoList);\n  let apiProfileBucket = new ApiProfileBucket(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.BKT_NAMECARD_ID\n  );\n\n  let apiProfileCollection = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  const todayStr = TsToStr(Date.now()).slice(1, -1);\n\n  const [isEnabled, setIsEnabled] = useState(false);\n  const toggleSwitch = () => setIsEnabled((previousState) => !previousState);\n\n  const [todayY, setTodayY] = useState(0);\n\n  const scrollRef: MutableRefObject<ScrollView | null> = useRef(null);\n\n  return (\n    <View style={STodo.todoSection}>\n      <View style={STodo.switchView}>\n        <Text style={styles.bodyBold}>Show All </Text>\n        <Switch\n          trackColor={{ false: SECONDARY_COLOR, true: PRIMARY_COLOR }}\n          thumbColor={isEnabled ? WHITE : DISABLE_COLOR}\n          ios_backgroundColor={GRAY}\n          onValueChange={toggleSwitch}\n          value={isEnabled}\n        />\n      </View>\n      <View style={{ flex: 1 }}>\n        <ScrollView\n          style={STodo.todoFlatList}\n          ref={scrollRef}\n          refreshControl={refreshControl}\n        >\n          {Object.keys(todoList).map((k, index) => {\n            return (\n              <TouchableOpacity\n                key={index}\n                onLayout={(event: any) => {\n                  const layout = event.nativeEvent.layout;\n                  if (k == todayStr) {\n                    setTodayY(layout.y);\n                    scrollRef.current!.scrollTo({\n                      y: layout.y,\n                      animated: true,\n                    });\n                  }\n                }}\n              >\n                <View\n                  style={\n                    todayStr == k\n                      ? STodo.highlightDateView\n                      : STodo.normalDateView\n                  }\n                >\n                  <View>\n                    <Text style={styles.title}>{k}</Text>\n                  </View>\n\n                  {todoList[k].map((v: ITodoItem, index: number) => {\n                    return isEnabled || (!isEnabled && !v.disabled) ? (\n                      <ProfileOneLine\n                        key={index}\n                        image={\n                          v.imagePath\n                            ? apiProfileBucket\n                                .getFilePreview(v.imagePath)\n                                .toString()\n                            : undefined\n                        }\n                        name={v.name}\n                        lastMessage={removeTodoDate(v.todo)}\n                        disabled={v.disabled}\n                        onPress={() => {\n                          toggleTodo(\n                            k,\n                            todoList[k],\n                            index,\n                            apiProfileCollection\n                          );\n                        }}\n                      />\n                    ) : undefined;\n                  })}\n                </View>\n              </TouchableOpacity>\n            );\n          })}\n        </ScrollView>\n      </View>\n    </View>\n  );\n};\n","// Used to check the type's attributes\n\nexport const ISTodoItem = {\n  $id: \"documentId\",\n  Name: \"name\",\n  Todo: \"todo\",\n  ImagePath: \"imagePath\",\n};\n\nexport interface ITodoItems {\n  documentId: string;\n  name: string;\n  todo: string[];\n  imagePath: any;\n}\n\nexport interface ITodoItem {\n  documentId: string;\n  name: string;\n  todo: string;\n  imagePath?: any;\n  disabled?: boolean;\n}\n","import { useFocusEffect } from \"@react-navigation/native\";\nimport React, { useCallback, useState } from \"react\";\nimport { ImageBackground } from \"react-native\";\nimport { RefreshControl } from \"react-native-gesture-handler\";\nimport styles from \"../assets/styles\";\nimport { ApiProfileCollection } from \"../backend/appwrite/service/database/collection/profile\";\nimport {\n  convertTodoItemToTodoList,\n  TodoSection,\n} from \"../components/todo/todoSection\";\nimport { Constants } from \"../Constants\";\nimport { ISTodoItem, ITodoItems } from \"../interfaces/todo\";\nimport store from \"../redux_modules\";\nimport { AChangeTodo } from \"../redux_modules/action\";\nimport { objectFilterKey, objectMapKey } from \"../utils/objectUtil\";\n\nconst Todo = ({ navigation }: { navigation: any }) => {\n  let apiProfileCollection = new ApiProfileCollection(\n    Constants.API_ENDPOINT,\n    Constants.P_NAMECARD_ID,\n    Constants.DB_NAMECARD_ID,\n    Constants.C_PROFILE_ID\n  );\n\n  const [refreshing, setRefreshing] = useState<boolean>(false);\n\n  useFocusEffect(\n    useCallback(() => {\n      let promise = apiProfileCollection.listDocument();\n      promise.then(\n        function (response: any) {\n          let newTodoItems: ITodoItems[] = response.documents.map(\n            (e: ITodoItems) => {\n              return objectMapKey(objectFilterKey(e, ISTodoItem), ISTodoItem);\n            }\n          );\n          store.dispatch(AChangeTodo(convertTodoItemToTodoList(newTodoItems)));\n        },\n        function (error: any) {\n          console.error(error);\n        }\n      );\n      setRefreshing(false);\n      return;\n    }, [refreshing])\n  );\n\n  return (\n    <ImageBackground\n      source={require(\"../assets/images/bg.png\")}\n      style={styles.bg}\n    >\n      {TodoSection(\n        <RefreshControl\n          refreshing={refreshing}\n          onRefresh={() => {\n            setRefreshing(true);\n          }}\n        />\n      )}\n    </ImageBackground>\n  );\n};\n\nexport default Todo;\n","import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Platform } from \"react-native\";\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\nimport { Provider, useSelector } from \"react-redux\";\nimport { BLACK, DARK_GRAY, PRIMARY_COLOR, WHITE } from \"./assets/styles\";\nimport { ApiAuth } from \"./backend/appwrite/service/database/auth\";\nimport TabBarIcon from \"./components/TabBarIcon\";\nimport { Constants } from \"./Constants\";\nimport store, { RootState } from \"./redux_modules\";\nimport { Login, Profile, Search, Todo } from \"./screens\";\n\nconst isIOS = Platform.OS == \"ios\";\nif (isIOS) {\n  let apiAuth = new ApiAuth(Constants.API_ENDPOINT, Constants.P_NAMECARD_ID);\n  apiAuth.createSessionIfNoLogin(Constants.EMAIL, Constants.PASSWORD);\n}\n\nconst App = () => {\n  const Stack = createStackNavigator();\n  const Tab = createBottomTabNavigator();\n\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen\n            name=\"Tab\"\n            options={{ headerShown: false, animationEnabled: false }}\n          >\n            {() => {\n              const session = useSelector((state: RootState) => state.session);\n\n              return (\n                <GestureHandlerRootView style={{ flex: 1 }}>\n                  <Tab.Navigator\n                    tabBarOptions={{\n                      showLabel: false,\n                      activeTintColor: PRIMARY_COLOR,\n                      inactiveTintColor: DARK_GRAY,\n                      labelStyle: {\n                        fontSize: 14,\n                        textTransform: \"uppercase\",\n                        paddingTop: 10,\n                      },\n                      style: {\n                        backgroundColor: WHITE,\n                        borderTopWidth: 0,\n                        marginBottom: 0,\n                        shadowOpacity: 0.05,\n                        shadowRadius: 10,\n                        shadowColor: BLACK,\n                        shadowOffset: { height: 0, width: 0 },\n                      },\n                    }}\n                  >\n                    {!session.loggedIn && !isIOS ? (\n                      <Tab.Screen\n                        name=\"Login\"\n                        component={Login}\n                        options={{\n                          unmountOnBlur: session.loggedIn,\n                          tabBarIcon: ({ focused }) => (\n                            <TabBarIcon\n                              focused={focused}\n                              iconName=\"chatbubble\"\n                              text=\"Login\"\n                            />\n                          ),\n                        }}\n                      />\n                    ) : (\n                      <React.Fragment>\n                        <Tab.Screen\n                          name=\"Search\"\n                          component={Search}\n                          options={{\n                            tabBarIcon: ({ focused }) => (\n                              <TabBarIcon\n                                focused={focused}\n                                iconName=\"search\"\n                                text=\"Search\"\n                              />\n                            ),\n                          }}\n                        />\n                        <Tab.Screen\n                          name=\"Profile\"\n                          component={Profile}\n                          options={{\n                            tabBarIcon: ({ focused }) => (\n                              <TabBarIcon\n                                focused={focused}\n                                iconName=\"person\"\n                                text=\"Profile\"\n                              />\n                            ),\n                          }}\n                        />\n                        <Tab.Screen\n                          name=\"Todo\"\n                          component={Todo}\n                          options={{\n                            tabBarIcon: ({ focused }) => (\n                              <TabBarIcon\n                                focused={focused}\n                                iconName=\"chatbubble\"\n                                text=\"Todo\"\n                              />\n                            ),\n                          }}\n                        />\n                      </React.Fragment>\n                    )}\n                  </Tab.Navigator>\n                </GestureHandlerRootView>\n              );\n            }}\n          </Stack.Screen>\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n};\n\n// const App = () => {\n//   return (\n//     <Provider store={store}>\n//       <AppInner />\n//     </Provider>\n//   );\n// };\n\nexport default App;\n\n// playground\n"],"sourceRoot":""}